!function(t){var n={};function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)e.d(r,o,function(n){return t[n]}.bind(null,o));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=8)}([function(t,n,e){"use strict";t.exports=function(t){var n=[];return n.toString=function(){return this.map(function(n){var e=function(t,n){var e=t[1]||"",r=t[3];if(!r)return e;if(n&&"function"==typeof btoa){var o=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),i=r.sources.map(function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"});return[e].concat(i).concat([o]).join("\n")}var a;return[e].join("\n")}(n,t);return n[2]?"@media "+n[2]+"{"+e+"}":e}).join("")},n.i=function(t,e){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];null!=i&&(r[i]=!0)}for(o=0;o<t.length;o++){var a=t[o];null!=a[0]&&r[a[0]]||(e&&!a[2]?a[2]=e:e&&(a[2]="("+a[2]+") and ("+e+")"),n.push(a))}},n}},function(t,n,e){var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),s=function(t){var n={};return function(t,e){if("function"==typeof t)return t();if(void 0===n[t]){var r=function(t,n){return n?n.querySelector(t):document.querySelector(t)}.call(this,t,e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}n[t]=r}return n[t]}}(),c=null,l=0,u=[],d=e(2);function f(t,n){for(var e=0;e<t.length;e++){var r=t[e],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(b(r.parts[a],n))}else{var s=[];for(a=0;a<r.parts.length;a++)s.push(b(r.parts[a],n));i[r.id]={id:r.id,refs:1,parts:s}}}}function h(t,n){for(var e=[],r={},o=0;o<t.length;o++){var i=t[o],a=n.base?i[0]+n.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(s):e.push(r[a]={id:a,parts:[s]})}return e}function p(t,n){var e=s(t.insertInto);if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=u[u.length-1];if("top"===t.insertAt)r?r.nextSibling?e.insertBefore(n,r.nextSibling):e.appendChild(n):e.insertBefore(n,e.firstChild),u.push(n);else if("bottom"===t.insertAt)e.appendChild(n);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=s(t.insertAt.before,e);e.insertBefore(n,o)}}function v(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var n=u.indexOf(t);n>=0&&u.splice(n,1)}function m(t){var n=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var r=function(){0;return e.nc}();r&&(t.attrs.nonce=r)}return g(n,t.attrs),p(t,n),n}function g(t,n){Object.keys(n).forEach(function(e){t.setAttribute(e,n[e])})}function b(t,n){var e,r,o,i;if(n.transform&&t.css){if(!(i="function"==typeof n.transform?n.transform(t.css):n.transform.default(t.css)))return function(){};t.css=i}if(n.singleton){var a=l++;e=c||(c=m(n)),r=x.bind(null,e,a,!1),o=x.bind(null,e,a,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(e=function(t){var n=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",g(n,t.attrs),p(t,n),n}(n),r=function(t,n,e){var r=e.css,o=e.sourceMap,i=void 0===n.convertToAbsoluteUrls&&o;(n.convertToAbsoluteUrls||i)&&(r=d(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),s=t.href;t.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,e,n),o=function(){v(e),e.href&&URL.revokeObjectURL(e.href)}):(e=m(n),r=function(t,n){var e=n.css,r=n.media;r&&t.setAttribute("media",r);if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}.bind(null,e),o=function(){v(e)});return r(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap)return;r(t=n)}else o()}}t.exports=function(t,n){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(n=n||{}).attrs="object"==typeof n.attrs?n.attrs:{},n.singleton||"boolean"==typeof n.singleton||(n.singleton=a()),n.insertInto||(n.insertInto="head"),n.insertAt||(n.insertAt="bottom");var e=h(t,n);return f(e,n),function(t){for(var r=[],o=0;o<e.length;o++){var a=e[o];(s=i[a.id]).refs--,r.push(s)}t&&f(h(t,n),n);for(o=0;o<r.length;o++){var s;if(0===(s=r[o]).refs){for(var c=0;c<s.parts.length;c++)s.parts[c]();delete i[s.id]}}}};var y,w=(y=[],function(t,n){return y[t]=n,y.filter(Boolean).join("\n")});function x(t,n,e,r){var o=e?"":r.css;if(t.styleSheet)t.styleSheet.cssText=w(n,o);else{var i=document.createTextNode(o),a=t.childNodes;a[n]&&t.removeChild(a[n]),a.length?t.insertBefore(i,a[n]):t.appendChild(i)}}},function(t,n){t.exports=function(t){var n="undefined"!=typeof window&&window.location;if(!n)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var e=n.protocol+"//"+n.host,r=e+n.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,n){var o,i=n.trim().replace(/^"(.*)"$/,function(t,n){return n}).replace(/^'(.*)'$/,function(t,n){return n});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?t:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?e+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(t,n,e){var r=function(t){"use strict";var n,e=Object.prototype,r=e.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",s=o.toStringTag||"@@toStringTag";function c(t,n,e,r){var o=n&&n.prototype instanceof v?n:v,i=Object.create(o.prototype),a=new j(r||[]);return i._invoke=function(t,n,e){var r=u;return function(o,i){if(r===f)throw new Error("Generator is already running");if(r===h){if("throw"===o)throw i;return C()}for(e.method=o,e.arg=i;;){var a=e.delegate;if(a){var s=L(a,e);if(s){if(s===p)continue;return s}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if(r===u)throw r=h,e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);r=f;var c=l(t,n,e);if("normal"===c.type){if(r=e.done?h:d,c.arg===p)continue;return{value:c.arg,done:e.done}}"throw"===c.type&&(r=h,e.method="throw",e.arg=c.arg)}}}(t,e,a),i}function l(t,n,e){try{return{type:"normal",arg:t.call(n,e)}}catch(t){return{type:"throw",arg:t}}}t.wrap=c;var u="suspendedStart",d="suspendedYield",f="executing",h="completed",p={};function v(){}function m(){}function g(){}var b={};b[i]=function(){return this};var y=Object.getPrototypeOf,w=y&&y(y(O([])));w&&w!==e&&r.call(w,i)&&(b=w);var x=g.prototype=v.prototype=Object.create(b);function k(t){["next","throw","return"].forEach(function(n){t[n]=function(t){return this._invoke(n,t)}})}function P(t){var n;this._invoke=function(e,o){function i(){return new Promise(function(n,i){!function n(e,o,i,a){var s=l(t[e],t,o);if("throw"!==s.type){var c=s.arg,u=c.value;return u&&"object"==typeof u&&r.call(u,"__await")?Promise.resolve(u.__await).then(function(t){n("next",t,i,a)},function(t){n("throw",t,i,a)}):Promise.resolve(u).then(function(t){c.value=t,i(c)},function(t){return n("throw",t,i,a)})}a(s.arg)}(e,o,n,i)})}return n=n?n.then(i,i):i()}}function L(t,e){var r=t.iterator[e.method];if(r===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=n,L(t,e),"throw"===e.method))return p;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return p}var o=l(r,t.iterator,e.arg);if("throw"===o.type)return e.method="throw",e.arg=o.arg,e.delegate=null,p;var i=o.arg;return i?i.done?(e[t.resultName]=i.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=n),e.delegate=null,p):i:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,p)}function E(t){var n={tryLoc:t[0]};1 in t&&(n.catchLoc=t[1]),2 in t&&(n.finallyLoc=t[2],n.afterLoc=t[3]),this.tryEntries.push(n)}function T(t){var n=t.completion||{};n.type="normal",delete n.arg,t.completion=n}function j(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(E,this),this.reset(!0)}function O(t){if(t){var e=t[i];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function e(){for(;++o<t.length;)if(r.call(t,o))return e.value=t[o],e.done=!1,e;return e.value=n,e.done=!0,e};return a.next=a}}return{next:C}}function C(){return{value:n,done:!0}}return m.prototype=x.constructor=g,g.constructor=m,g[s]=m.displayName="GeneratorFunction",t.isGeneratorFunction=function(t){var n="function"==typeof t&&t.constructor;return!!n&&(n===m||"GeneratorFunction"===(n.displayName||n.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,g):(t.__proto__=g,s in t||(t[s]="GeneratorFunction")),t.prototype=Object.create(x),t},t.awrap=function(t){return{__await:t}},k(P.prototype),P.prototype[a]=function(){return this},t.AsyncIterator=P,t.async=function(n,e,r,o){var i=new P(c(n,e,r,o));return t.isGeneratorFunction(e)?i:i.next().then(function(t){return t.done?t.value:i.next()})},k(x),x[s]="Generator",x[i]=function(){return this},x.toString=function(){return"[object Generator]"},t.keys=function(t){var n=[];for(var e in t)n.push(e);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=O,j.prototype={constructor:j,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(T),!t)for(var e in this)"t"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=n)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function o(r,o){return s.type="throw",s.arg=t,e.next=r,o&&(e.method="next",e.arg=n),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],s=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var c=r.call(a,"catchLoc"),l=r.call(a,"finallyLoc");if(c&&l){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(c){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(t,n){for(var e=this.tryEntries.length-1;e>=0;--e){var o=this.tryEntries[e];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,p):this.complete(a)},complete:function(t,n){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&n&&(this.next=n),p},finish:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.finallyLoc===t)return this.complete(e.completion,e.afterLoc),T(e),p}},catch:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.tryLoc===t){var r=e.completion;if("throw"===r.type){var o=r.arg;T(e)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:O(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=n),p}},t}(t.exports);try{regeneratorRuntime=r}catch(t){Function("r","regeneratorRuntime = r")(r)}},,,,,function(t,n,e){e(3),t.exports=e(11)},function(t,n,e){var r=e(10);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};e(1)(r,o);r.locals&&(t.exports=r.locals)},function(t,n,e){(t.exports=e(0)(!1)).push([t.i,":root {\n    --background-color: white;\n    --main-color: rgb(63, 111, 139);\n    --text-color: black;\n    --disabled-color: rgb(207,207,207);\n    --hover-color: rgb(125, 177, 247);\n    --visited-color: rgb(107, 82, 139);\n    --hover-visited-color: rgb(168, 129, 218);\n}\n\n/* Use box sizing (https://css-tricks.com/box-sizing/) */\n\nhtml {\n    box-sizing: border-box;\n}\n\n*, *:before, *:after {\n    box-sizing: inherit;\n}\n\nbody {\n    margin: 3px;\n    background-color: white;\n    background-color: var(--background-color);\n    color: black;\n    color: var(--text-color);\n}\n\narticle {\n    font-family: sans-serif;\n    background-color: white;\n    background-color: var(--background-color);\n}\n\nheader {\n    color: rgb(63, 111, 139);\n    color: var(--main-color);\n}\n\nbutton {\n    border: 1px solid rgb(63, 111, 139);\n    border: 1px solid var(--main-color);\n    padding: 1em 3em;\n    background-color: white;\n    background-color: var(--background-color);\n    color: rgb(63, 111, 139);\n    color: var(--main-color);\n    font-weight: bold;\n}\n\nbutton:disabled {\n    border: 1px solid rgb(207,207,207);\n    border: 1px solid var(--disabled-color);\n    padding: 1em 3em;\n    background-color: white;\n    background-color: var(--background-color);\n    color: rgb(207,207,207);\n    color: var(--disabled-color);\n}\n\nbutton:disabled:hover {\n    border: 1px solid rgb(207,207,207);\n    border: 1px solid var(--disabled-color);\n    padding: 1em 3em;\n    background-color: white;\n    background-color: var(--background-color);\n    color: rgb(207,207,207);\n    color: var(--disabled-color);\n}\n\nbutton:hover {\n    padding: 1em 3em;\n    background-color: rgb(63, 111, 139);\n    background-color: var(--main-color);\n    color: white;\n    color: var(--background-color);\n    border: 1px solid rgb(63, 111, 139);\n    border: 1px solid var(--main-color);\n}\n\nbutton:active {\n    padding: 1em 3em;\n    background-color: rgb(63, 111, 139);\n    background-color: var(--main-color);\n    color: white;\n    color: var(--background-color);\n    border: 1px solid rgb(63, 111, 139);\n    border: 1px solid var(--main-color);\n}\n\nbutton:focus {\n    padding: 1em 3em;\n    background-color: rgb(63, 111, 139);\n    background-color: var(--main-color);\n    color: white;\n    color: var(--background-color);\n    border: 1px solid rgb(63, 111, 139);\n    border: 1px solid var(--main-color);\n}\n\na {\n    color: rgb(63, 111, 139);\n    color: var(--main-color);\n}\n\na:visited {\n    color: rgb(107, 82, 139);\n    color: var(--visited-color);\n}\n\na:hover {\n    color: rgb(125, 177, 247);\n    color: var(--hover-color);\n}\n\na:hover:visited {\n    color: rgb(168, 129, 218);\n    color: var(--hover-visited-color);\n}\n\n#myCanvas {\n    border: 3px solid rgb(63, 111, 139);\n    border: 3px solid var(--main-color);\n    width: 100%;\n    height: 300px;\n}\n\ndiv.action-controls {\n    width: 100%;\n}\n\ndiv.action-controls > button {\n    width: 100%;\n    margin-bottom: 10px;\n}\n\ndiv.speed-controls {\n}\n\n@media screen and (min-width: 228px) {\n    div.action-controls > button {\n        width: auto;\n    }\n}\n\n@media screen and (min-width: 475px) {\n    div.action-controls {\n        width: 50%;\n        float: left;\n    }\n    div.action-controls > button {\n        width: auto;\n        margin-bottom: 0;\n    }\n\n    div.speed-controls {\n        width: 50%;\n        float: left;\n    }\n}\n\n@media screen and (min-width: 606px) {\n    #myCanvas {\n        width: 600px;\n    }\n\n    div.action-controls {\n        width: 300px;\n        float: left;\n    }\n\n    div.speed-controls {\n        width: 300px;\n        float: left;\n    }\n}\n",""])},function(t,n,e){"use strict";e.r(n);e(3);function r(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var o=function(){function t(n,e,r,o){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.xPos=n,this.yPos=e,this.width=r,this.color=o}var n,e,o;return n=t,(e=[{key:"draw",value:function(t){t.beginPath(),t.lineCap="round",t.strokeStyle=this.color,t.lineWidth=15,t.moveTo(this.xPos-5*this.width,this.yPos),t.lineTo(this.xPos+5*this.width,this.yPos),t.stroke()}}])&&r(n.prototype,e),o&&r(n,o),t}(),i=regeneratorRuntime.mark(function t(n,e,r,o){return regeneratorRuntime.wrap(function(i){for(;;)switch(i.prev=i.next){case 0:if(!(n>0)){i.next=5;break}return i.delegateYield(t(n-1,e,o,r),"t0",2);case 2:return i.next=4,{action:"move",source:e,target:r};case 4:return i.delegateYield(t(n-1,o,r,e),"t1",5);case 5:case"end":return i.stop()}},t)});e(9);function a(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}window.onload=function(){var t=document.getElementById("currentAnimationText"),n=!1,e=!1,r=1,s=[],c=function(t){var n=document.getElementById("myCanvas"),e=n.getContext("2d");e.clearRect(0,0,n.width,n.height),s.forEach(function(t){e.save(),t.draw(e),e.restore()}),"function"==typeof t&&(e.save(),t(e),e.restore())},l=function(){function o(t,n,e,r){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,o),this.name=t,this.xPos=n,this.yPos=e,this.disks=r,this.width=40,this.height=130}var i,s,l;return i=o,(s=[{key:"moveTopDiskTo",value:function(o,i){var a=this.disks.pop();e||t.replaceChild(document.createTextNode("Moving "+a.color+" disk from "+this.name+" to "+o.name),t.lastChild);var s="move-up";n=!0;e||window.requestAnimationFrame(function t(){if(e)return o.pushDisk(a),n=!1,void i();if("move-up"===s)a.yPos-=r,a.yPos<=50&&(a.yPos=50,s="move-across");else if("move-across"===s)a.xPos<o.xPos&&(a.xPos+=r),a.xPos>o.xPos&&(a.xPos-=r),a.xPos>o.xPos-r&&a.xPos<o.xPos+r&&(a.xPos=o.xPos,s="move-down");else if("move-down"===s){var l=230;o.disks.length>0&&(l=o.disks[o.disks.length-1].yPos-20),a.yPos<l&&(a.yPos+=r),a.yPos>=l&&(a.yPos=l,s="finished")}else if("finished"===s)return o.pushDisk(a),n=!1,void i();c(function(t){a.draw(t)}),n&&window.requestAnimationFrame(t)})}},{key:"pushDisk",value:function(t){this.disks.length>0?t.yPos=this.disks[this.disks.length-1].yPos-20:t.yPos=230,this.disks.push(t),t.xPos=this.xPos}},{key:"draw",value:function(t){t.beginPath(),t.lineCap="square",t.strokeStyle="brown",t.lineWidth=5,t.moveTo(this.xPos,this.yPos),t.stroke(),t.moveTo(this.xPos,this.yPos),t.lineTo(this.xPos-this.width,this.yPos),t.stroke(),t.moveTo(this.xPos,this.yPos),t.lineTo(this.xPos+this.width,this.yPos),t.stroke(),t.moveTo(this.xPos,this.yPos),t.lineTo(this.xPos,this.yPos-this.height),t.stroke(),t.strokeStyle="black",t.lineWidth=1,t.textAlign="center",t.font="24px sans-serif",t.fillText(this.name,this.xPos,this.yPos+35),this.disks.forEach(function(n){n.draw(t)})}}])&&a(i.prototype,s),l&&a(i,l),o}(),u=function(){s=[new l("A",100,250,[new o(100,230,5,"purple"),new o(100,210,4,"blue"),new o(100,190,3,"green"),new o(100,170,2,"orange"),new o(100,150,1,"red")]),new l("B",300,250,[]),new l("C",500,250,[])]};!function(){t.appendChild(document.createTextNode("Press the Go button to begin:")),u();var n=document.getElementById("animateButton");n.addEventListener("click",function(){n.disabled=!0;var r=i(s[0].disks.length,s[0],s[2],s[1],[]);!function o(i,a){if(a.done)return window.requestAnimationFrame(c),n.disabled=!1,t.replaceChild(document.createTextNode("All finished. Press reset to start over:"),t.lastChild),void(e&&(e=!1));if(a.value){var s=a.value.source,l=a.value.target;s.moveTopDiskTo(l,function(){o(0,r.next())})}}(0,r.next())}),document.getElementById("resetButton").addEventListener("click",function(){e=!0,t.replaceChild(document.createTextNode("Resetting"),t.lastChild),setTimeout(function(){n.disabled=!1,t.replaceChild(document.createTextNode("Press the Go button to begin:"),t.lastChild),u(),window.requestAnimationFrame(c),e=!1},1e3)});var o=document.getElementById("speedSlider");o.oninput=function(){r=parseInt(o.value,10)},r=parseInt(o.value,10),window.requestAnimationFrame(c)}()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,