(()=>{var t={775:(t,n,e)=>{"use strict";function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function r(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),n&&i(t,n)}function i(t,n){return(i=Object.setPrototypeOf||function(t,n){return t.__proto__=n,t})(t,n)}function a(t){var n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var e,o=c(t);if(n){var r=c(this).constructor;e=Reflect.construct(o,arguments,r)}else e=o.apply(this,arguments);return s(this,e)}}function s(t,n){return!n||"object"!==o(n)&&"function"!=typeof n?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):n}function c(t){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function l(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}function u(t,n){for(var e=0;e<n.length;e++){var o=n[e];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function d(t,n,e){return n&&u(t.prototype,n),e&&u(t,e),t}e(666);var h=function(){function t(n,e){l(this,t),this.mover=n,this.speed=e,this.finished=!1}return d(t,[{key:"move",value:function(t){throw new Error("Override this method")}},{key:"next",value:function(){return this}}]),t}(),f=function(t){r(e,t);var n=a(e);function e(t,o){var r;return l(this,e),(r=n.call(this,t,o)).finished=!0,r}return e}(h),A=function(t){r(e,t);var n=a(e);function e(t,o){var r;return l(this,e),(r=n.call(this,t,o)).mover.toPeg.disks.length>0?r.yPosTarget=r.mover.toPeg.disks[r.mover.toPeg.disks.length-1].yPos-20:r.yPosTarget=230,r}return d(e,[{key:"move",value:function(t){this.mover.disk.yPos<this.yPosTarget&&(this.mover.disk.yPos+=this.speed*t,this.mover.disk.yPos>=this.yPosTarget&&(this.mover.disk.yPos=this.yPosTarget))}},{key:"next",value:function(){return this.mover.disk.yPos===this.yPosTarget?new f(this.mover,this.speed):this}}]),e}(h),v=function(t){r(e,t);var n=a(e);function e(){return l(this,e),n.apply(this,arguments)}return d(e,[{key:"move",value:function(t){this.mover.disk.xPos<this.mover.toPeg.xPos?(this.mover.disk.xPos+=this.speed*t,this.mover.disk.xPos>this.mover.toPeg.xPos&&(this.mover.disk.xPos=this.mover.toPeg.xPos)):this.mover.disk.xPos>this.mover.toPeg.xPos&&(this.mover.disk.xPos-=this.speed*t,this.mover.disk.xPos<this.mover.toPeg.xPos&&(this.mover.disk.xPos=this.mover.toPeg.xPos))}},{key:"next",value:function(){return this.mover.disk.xPos===this.mover.toPeg.xPos?new A(this.mover,this.speed):this}}]),e}(h),p=function(t){r(e,t);var n=a(e);function e(){return l(this,e),n.apply(this,arguments)}return d(e,[{key:"move",value:function(t){this.mover.disk.yPos-=this.speed*t}},{key:"next",value:function(){return this.mover.disk.yPos<=50?(this.mover.disk.yPos=50,new v(this.mover,this.speed)):this}}]),e}(h);function m(t,n){for(var e=0;e<n.length;e++){var o=n[e];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}var y=function(){function t(n,e,o,r){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.xPos=n,this.yPos=e,this.width=o,this.color=r}var n,e;return n=t,(e=[{key:"draw",value:function(t){t.beginPath(),t.lineCap="round",t.strokeStyle=this.color,t.lineWidth=15,t.moveTo(this.xPos-5*this.width,this.yPos),t.lineTo(this.xPos+5*this.width,this.yPos),t.stroke()}}])&&m(n.prototype,e),t}();function g(t,n){for(var e=0;e<n.length;e++){var o=n[e];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}var b=function(){function t(n,e,o,r){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.name=n,this.xPos=e,this.yPos=o,this.disks=r,this.width=40,this.height=130}var n,e;return n=t,(e=[{key:"pushDisk",value:function(t){this.disks.length>0?t.yPos=this.disks[this.disks.length-1].yPos-20:t.yPos=230,this.disks.push(t),t.xPos=this.xPos}},{key:"draw",value:function(t){t.beginPath(),t.lineCap="square",t.strokeStyle="brown",t.lineWidth=5,t.moveTo(this.xPos,this.yPos),t.stroke(),t.moveTo(this.xPos,this.yPos),t.lineTo(this.xPos-this.width,this.yPos),t.stroke(),t.moveTo(this.xPos,this.yPos),t.lineTo(this.xPos+this.width,this.yPos),t.stroke(),t.moveTo(this.xPos,this.yPos),t.lineTo(this.xPos,this.yPos-this.height),t.stroke(),t.strokeStyle="black",t.lineWidth=1,t.textAlign="center",t.font="24px sans-serif",t.fillText(this.name,this.xPos,this.yPos+35),this.disks.forEach((function(n){n.draw(t)}))}}])&&g(n.prototype,e),t}(),C=regeneratorRuntime.mark((function t(n,e,o,r){return regeneratorRuntime.wrap((function(i){for(;;)switch(i.prev=i.next){case 0:if(!(n>0)){i.next=5;break}return i.delegateYield(t(n-1,e,r,o),"t0",2);case 2:return i.next=4,{action:"move",source:e,target:o};case 4:return i.delegateYield(t(n-1,r,o,e),"t1",5);case 5:case"end":return i.stop()}}),t)})),w=e(379),x=e.n(w),k=e(827);function I(t,n){for(var e=0;e<n.length;e++){var o=n[e];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}x()(k.Z,{insert:"head",singleton:!1}),k.Z.locals,window.onload=function(){var t=document.getElementById("currentAnimationText"),n=!1,e=!1,o=1,r=[],i=null,a=function(t,n){var e=document.getElementById("myCanvas"),o=e.getContext("2d");o.clearRect(0,0,e.width,e.height),r.forEach((function(t){o.save(),t.draw(o),o.restore()})),"function"==typeof n&&(o.save(),n(o),o.restore())},s=function(){function r(t,n){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,r),this.speedMultiplier=5,this.fromPeg=t,this.toPeg=n,this.lastFrame=null,this.animationState=new p(this,o*this.speedMultiplier),this.disk=null,this.finishedCallback=null}var i,s;return i=r,(s=[{key:"speed",get:function(){return this.animationState.speed},set:function(t){this.animationState.speed=t*this.speedMultiplier}},{key:"move",value:function(o){var r=this;this.finishedCallback=o,this.disk=this.fromPeg.disks.pop(),e||t.replaceChild(document.createTextNode("Moving "+this.disk.color+" disk from "+this.fromPeg.name+" to "+this.toPeg.name),t.lastChild),n=!0,e||window.requestAnimationFrame((function(t){return r.update(t)}))}},{key:"cancel",value:function(){n=!1,this.animationState=new f(this.mover,5*o),this.disk&&this.toPeg.pushDisk(this.disk)}},{key:"update",value:function(t){var e=this,o=0;this.lastFrame&&t&&(o=(t-this.lastFrame)/100),this.animationState.move(o),this.animationState=this.animationState.next(),this.animationState.finished?(this.toPeg.pushDisk(this.disk),n=!1,this.finishedCallback()):(a(0,(function(t){e.disk.draw(t)})),this.lastFrame=t,n&&window.requestAnimationFrame((function(t){return e.update(t)})))}}])&&I(i.prototype,s),r}(),c=function(){r=[new b("A",100,250,[new y(100,230,5,"purple"),new y(100,210,4,"blue"),new y(100,190,3,"green"),new y(100,170,2,"orange"),new y(100,150,1,"red")]),new b("B",300,250,[]),new b("C",500,250,[])]};!function(){t.appendChild(document.createTextNode("Press the Go button to begin:")),c();var n=document.getElementById("animateButton");n.addEventListener("click",(function(){n.disabled=!0;var o=C(r[0].disks.length,r[0],r[2],r[1],[]);!function n(r,c){if(c.done)return window.requestAnimationFrame(a),t.replaceChild(document.createTextNode("All finished. Press reset to start over:"),t.lastChild),void(e&&(e=!1));if(c.value){var l=c.value.source,u=c.value.target;(i=new s(l,u)).move((function(){n(0,o.next())}))}}(0,o.next())})),document.getElementById("resetButton").addEventListener("click",(function(){e=!0,t.replaceChild(document.createTextNode("Resetting"),t.lastChild),i&&(i.cancel(),window.requestAnimationFrame((function(){n.disabled=!1,t.replaceChild(document.createTextNode("Press the Go button to begin:"),t.lastChild),c(),window.requestAnimationFrame(a),e=!1})))}));var l=document.getElementById("speedSlider");l.oninput=function(){o=parseInt(l.value,10),i&&(i.speed=o)},o=parseInt(l.value,10),i&&(i.speed=o),window.requestAnimationFrame(a)}()}},808:(t,n,e)=>{"use strict";e.d(n,{Z:()=>s});var o=e(15),r=e.n(o),i=e(645),a=e.n(i)()(r());a.push([t.id,":root {\n    --background-color: white;\n    --main-color: rgb(63, 111, 139);\n    --text-color: black;\n    --disabled-color: rgb(207,207,207);\n    --hover-color: rgb(125, 177, 247);\n    --visited-color: rgb(107, 82, 139);\n    --hover-visited-color: rgb(168, 129, 218);\n}\n\n/* Use box sizing (https://css-tricks.com/box-sizing/) */\nhtml {\n    box-sizing: border-box;\n}\n*, *:before, *:after {\n    box-sizing: inherit;\n}\n\n\nbody {\n    margin: 3px;\n    background-color: white;\n    background-color: var(--background-color);\n    color: black;\n    color: var(--text-color);\n}\n\narticle {\n    font-family: sans-serif;\n    background-color: white;\n    background-color: var(--background-color);\n}\n\nheader {\n    color: rgb(63, 111, 139);\n    color: var(--main-color);\n}\n\nbutton {\n    border: 1px solid rgb(63, 111, 139);\n    border: 1px solid var(--main-color);\n    padding: 1em 3em;\n    background-color: white;\n    background-color: var(--background-color);\n    color: rgb(63, 111, 139);\n    color: var(--main-color);\n    font-weight: bold;\n}\n\nbutton:disabled {\n    border: 1px solid rgb(207,207,207);\n    border: 1px solid var(--disabled-color);\n    padding: 1em 3em;\n    background-color: white;\n    background-color: var(--background-color);\n    color: rgb(207,207,207);\n    color: var(--disabled-color);\n}\n\nbutton:disabled:hover {\n    border: 1px solid rgb(207,207,207);\n    border: 1px solid var(--disabled-color);\n    padding: 1em 3em;\n    background-color: white;\n    background-color: var(--background-color);\n    color: rgb(207,207,207);\n    color: var(--disabled-color);\n}\n\nbutton:active,\nbutton:focus,\nbutton:hover {\n    padding: 1em 3em;\n    background-color: rgb(63, 111, 139);\n    background-color: var(--main-color);\n    color: white;\n    color: var(--background-color);\n    border: 1px solid rgb(63, 111, 139);\n    border: 1px solid var(--main-color);\n}\n\na {\n    color: rgb(63, 111, 139);\n    color: var(--main-color);\n}\na:visited {\n    color: rgb(107, 82, 139);\n    color: var(--visited-color);\n}\na:hover {\n    color: rgb(125, 177, 247);\n    color: var(--hover-color);\n}\na:hover:visited {\n    color: rgb(168, 129, 218);\n    color: var(--hover-visited-color);\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,yBAAyB;IACzB,+BAA+B;IAC/B,mBAAmB;IACnB,kCAA0B;IAC1B,iCAAiC;IACjC,kCAAkC;IAClC,yCAAyC;AAC7C;;AAEA,wDAAwD;AACxD;IACI,sBAAsB;AAC1B;AACA;IACI,mBAAmB;AACvB;;;AAGA;IACI,WAAW;IACX,uBAAyC;IAAzC,yCAAyC;IACzC,YAAwB;IAAxB,wBAAwB;AAC5B;;AAEA;IACI,uBAAuB;IACvB,uBAAyC;IAAzC,yCAAyC;AAC7C;;AAEA;IACI,wBAAwB;IAAxB,wBAAwB;AAC5B;;AAEA;IACI,mCAAmC;IAAnC,mCAAmC;IACnC,gBAAgB;IAChB,uBAAyC;IAAzC,yCAAyC;IACzC,wBAAwB;IAAxB,wBAAwB;IACxB,iBAAiB;AACrB;;AAEA;IACI,kCAAuC;IAAvC,uCAAuC;IACvC,gBAAgB;IAChB,uBAAyC;IAAzC,yCAAyC;IACzC,uBAA4B;IAA5B,4BAA4B;AAChC;;AAEA;IACI,kCAAuC;IAAvC,uCAAuC;IACvC,gBAAgB;IAChB,uBAAyC;IAAzC,yCAAyC;IACzC,uBAA4B;IAA5B,4BAA4B;AAChC;;AAEA;;;IAGI,gBAAgB;IAChB,mCAAmC;IAAnC,mCAAmC;IACnC,YAA8B;IAA9B,8BAA8B;IAC9B,mCAAmC;IAAnC,mCAAmC;AACvC;;AAEA;IACI,wBAAwB;IAAxB,wBAAwB;AAC5B;AACA;IACI,wBAA2B;IAA3B,2BAA2B;AAC/B;AACA;IACI,yBAAyB;IAAzB,yBAAyB;AAC7B;AACA;IACI,yBAAiC;IAAjC,iCAAiC;AACrC",sourcesContent:[":root {\n    --background-color: white;\n    --main-color: rgb(63, 111, 139);\n    --text-color: black;\n    --disabled-color: gray(83);\n    --hover-color: rgb(125, 177, 247);\n    --visited-color: rgb(107, 82, 139);\n    --hover-visited-color: rgb(168, 129, 218);\n}\n\n/* Use box sizing (https://css-tricks.com/box-sizing/) */\nhtml {\n    box-sizing: border-box;\n}\n*, *:before, *:after {\n    box-sizing: inherit;\n}\n\n\nbody {\n    margin: 3px;\n    background-color: var(--background-color);\n    color: var(--text-color);\n}\n\narticle {\n    font-family: sans-serif;\n    background-color: var(--background-color);\n}\n\nheader {\n    color: var(--main-color);\n}\n\nbutton {\n    border: 1px solid var(--main-color);\n    padding: 1em 3em;\n    background-color: var(--background-color);\n    color: var(--main-color);\n    font-weight: bold;\n}\n\nbutton:disabled {\n    border: 1px solid var(--disabled-color);\n    padding: 1em 3em;\n    background-color: var(--background-color);\n    color: var(--disabled-color);\n}\n\nbutton:disabled:hover {\n    border: 1px solid var(--disabled-color);\n    padding: 1em 3em;\n    background-color: var(--background-color);\n    color: var(--disabled-color);\n}\n\nbutton:active,\nbutton:focus,\nbutton:hover {\n    padding: 1em 3em;\n    background-color: var(--main-color);\n    color: var(--background-color);\n    border: 1px solid var(--main-color);\n}\n\na {\n    color: var(--main-color);\n}\na:visited {\n    color: var(--visited-color);\n}\na:hover {\n    color: var(--hover-color);\n}\na:hover:visited {\n    color: var(--hover-visited-color);\n}\n"],sourceRoot:""}]);const s=a},827:(t,n,e)=>{"use strict";e.d(n,{Z:()=>l});var o=e(15),r=e.n(o),i=e(645),a=e.n(i),s=e(808),c=a()(r());c.i(s.Z),c.push([t.id,"#myCanvas {\n    border: 3px solid var(--main-color);\n    width: 100%;\n    height: 300px;\n}\n\ndiv.action-controls {\n    width: 100%;\n}\ndiv.action-controls > button {\n    width: 100%;\n    margin-bottom: 10px;\n}\n\ndiv.speed-controls {\n}\n\n@media screen and (min-width: 228px) {\n    div.action-controls > button {\n        width: auto;\n    }\n}\n\n@media screen and (min-width: 475px) {\n    div.action-controls {\n        width: 50%;\n        float: left;\n    }\n    div.action-controls > button {\n        width: auto;\n        margin-bottom: 0;\n    }\n\n    div.speed-controls {\n        width: 50%;\n        float: left;\n    }\n}\n\n@media screen and (min-width: 606px) {\n    #myCanvas {\n        width: 600px;\n    }\n\n    div.action-controls {\n        width: 300px;\n        float: left;\n    }\n\n    div.speed-controls {\n        width: 300px;\n        float: left;\n    }\n}\n","",{version:3,sources:["webpack://./src/tower-of-hanoi/style.css"],names:[],mappings:"AAEA;IACI,mCAAmC;IACnC,WAAW;IACX,aAAa;AACjB;;AAEA;IACI,WAAW;AACf;AACA;IACI,WAAW;IACX,mBAAmB;AACvB;;AAEA;AACA;;AAEA;IACI;QACI,WAAW;IACf;AACJ;;AAEA;IACI;QACI,UAAU;QACV,WAAW;IACf;IACA;QACI,WAAW;QACX,gBAAgB;IACpB;;IAEA;QACI,UAAU;QACV,WAAW;IACf;AACJ;;AAEA;IACI;QACI,YAAY;IAChB;;IAEA;QACI,YAAY;QACZ,WAAW;IACf;;IAEA;QACI,YAAY;QACZ,WAAW;IACf;AACJ",sourcesContent:['@import "../style.css";\n\n#myCanvas {\n    border: 3px solid var(--main-color);\n    width: 100%;\n    height: 300px;\n}\n\ndiv.action-controls {\n    width: 100%;\n}\ndiv.action-controls > button {\n    width: 100%;\n    margin-bottom: 10px;\n}\n\ndiv.speed-controls {\n}\n\n@media screen and (min-width: 228px) {\n    div.action-controls > button {\n        width: auto;\n    }\n}\n\n@media screen and (min-width: 475px) {\n    div.action-controls {\n        width: 50%;\n        float: left;\n    }\n    div.action-controls > button {\n        width: auto;\n        margin-bottom: 0;\n    }\n\n    div.speed-controls {\n        width: 50%;\n        float: left;\n    }\n}\n\n@media screen and (min-width: 606px) {\n    #myCanvas {\n        width: 600px;\n    }\n\n    div.action-controls {\n        width: 300px;\n        float: left;\n    }\n\n    div.speed-controls {\n        width: 300px;\n        float: left;\n    }\n}\n'],sourceRoot:""}]);const l=c},645:t=>{"use strict";t.exports=function(t){var n=[];return n.toString=function(){return this.map((function(n){var e=t(n);return n[2]?"@media ".concat(n[2]," {").concat(e,"}"):e})).join("")},n.i=function(t,e,o){"string"==typeof t&&(t=[[null,t,""]]);var r={};if(o)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(r[a]=!0)}for(var s=0;s<t.length;s++){var c=[].concat(t[s]);o&&r[c[0]]||(e&&(c[2]?c[2]="".concat(e," and ").concat(c[2]):c[2]=e),n.push(c))}},n}},15:t=>{"use strict";function n(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,o=new Array(n);e<n;e++)o[e]=t[e];return o}t.exports=function(t){var e,o,r=(o=4,function(t){if(Array.isArray(t))return t}(e=t)||function(t,n){var e=t&&("undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"]);if(null!=e){var o,r,i=[],a=!0,s=!1;try{for(e=e.call(t);!(a=(o=e.next()).done)&&(i.push(o.value),!n||i.length!==n);a=!0);}catch(t){s=!0,r=t}finally{try{a||null==e.return||e.return()}finally{if(s)throw r}}return i}}(e,o)||function(t,e){if(t){if("string"==typeof t)return n(t,e);var o=Object.prototype.toString.call(t).slice(8,-1);return"Object"===o&&t.constructor&&(o=t.constructor.name),"Map"===o||"Set"===o?Array.from(t):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?n(t,e):void 0}}(e,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=r[1],a=r[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),l="/*# ".concat(c," */"),u=a.sources.map((function(t){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(t," */")}));return[i].concat(u).concat([l]).join("\n")}return[i].join("\n")}},666:t=>{var n=function(t){"use strict";var n,e=Object.prototype,o=e.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},i=r.iterator||"@@iterator",a=r.asyncIterator||"@@asyncIterator",s=r.toStringTag||"@@toStringTag";function c(t,n,e){return Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}),t[n]}try{c({},"")}catch(t){c=function(t,n,e){return t[n]=e}}function l(t,n,e,o){var r=n&&n.prototype instanceof p?n:p,i=Object.create(r.prototype),a=new E(o||[]);return i._invoke=function(t,n,e){var o=d;return function(r,i){if(o===f)throw new Error("Generator is already running");if(o===A){if("throw"===r)throw i;return j()}for(e.method=r,e.arg=i;;){var a=e.delegate;if(a){var s=I(a,e);if(s){if(s===v)continue;return s}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if(o===d)throw o=A,e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);o=f;var c=u(t,n,e);if("normal"===c.type){if(o=e.done?A:h,c.arg===v)continue;return{value:c.arg,done:e.done}}"throw"===c.type&&(o=A,e.method="throw",e.arg=c.arg)}}}(t,e,a),i}function u(t,n,e){try{return{type:"normal",arg:t.call(n,e)}}catch(t){return{type:"throw",arg:t}}}t.wrap=l;var d="suspendedStart",h="suspendedYield",f="executing",A="completed",v={};function p(){}function m(){}function y(){}var g={};g[i]=function(){return this};var b=Object.getPrototypeOf,C=b&&b(b(T([])));C&&C!==e&&o.call(C,i)&&(g=C);var w=y.prototype=p.prototype=Object.create(g);function x(t){["next","throw","return"].forEach((function(n){c(t,n,(function(t){return this._invoke(n,t)}))}))}function k(t,n){function e(r,i,a,s){var c=u(t[r],t,i);if("throw"!==c.type){var l=c.arg,d=l.value;return d&&"object"==typeof d&&o.call(d,"__await")?n.resolve(d.__await).then((function(t){e("next",t,a,s)}),(function(t){e("throw",t,a,s)})):n.resolve(d).then((function(t){l.value=t,a(l)}),(function(t){return e("throw",t,a,s)}))}s(c.arg)}var r;this._invoke=function(t,o){function i(){return new n((function(n,r){e(t,o,n,r)}))}return r=r?r.then(i,i):i()}}function I(t,e){var o=t.iterator[e.method];if(o===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=n,I(t,e),"throw"===e.method))return v;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var r=u(o,t.iterator,e.arg);if("throw"===r.type)return e.method="throw",e.arg=r.arg,e.delegate=null,v;var i=r.arg;return i?i.done?(e[t.resultName]=i.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=n),e.delegate=null,v):i:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,v)}function B(t){var n={tryLoc:t[0]};1 in t&&(n.catchLoc=t[1]),2 in t&&(n.finallyLoc=t[2],n.afterLoc=t[3]),this.tryEntries.push(n)}function P(t){var n=t.completion||{};n.type="normal",delete n.arg,t.completion=n}function E(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(B,this),this.reset(!0)}function T(t){if(t){var e=t[i];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,a=function e(){for(;++r<t.length;)if(o.call(t,r))return e.value=t[r],e.done=!1,e;return e.value=n,e.done=!0,e};return a.next=a}}return{next:j}}function j(){return{value:n,done:!0}}return m.prototype=w.constructor=y,y.constructor=m,m.displayName=c(y,s,"GeneratorFunction"),t.isGeneratorFunction=function(t){var n="function"==typeof t&&t.constructor;return!!n&&(n===m||"GeneratorFunction"===(n.displayName||n.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,y):(t.__proto__=y,c(t,s,"GeneratorFunction")),t.prototype=Object.create(w),t},t.awrap=function(t){return{__await:t}},x(k.prototype),k.prototype[a]=function(){return this},t.AsyncIterator=k,t.async=function(n,e,o,r,i){void 0===i&&(i=Promise);var a=new k(l(n,e,o,r),i);return t.isGeneratorFunction(e)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},x(w),c(w,s,"Generator"),w[i]=function(){return this},w.toString=function(){return"[object Generator]"},t.keys=function(t){var n=[];for(var e in t)n.push(e);return n.reverse(),function e(){for(;n.length;){var o=n.pop();if(o in t)return e.value=o,e.done=!1,e}return e.done=!0,e}},t.values=T,E.prototype={constructor:E,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(P),!t)for(var e in this)"t"===e.charAt(0)&&o.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=n)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function r(o,r){return s.type="throw",s.arg=t,e.next=o,r&&(e.method="next",e.arg=n),!!r}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],s=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var c=o.call(a,"catchLoc"),l=o.call(a,"finallyLoc");if(c&&l){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(c){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(t,n){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc<=this.prev&&o.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var i=r;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,v):this.complete(a)},complete:function(t,n){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&n&&(this.next=n),v},finish:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.finallyLoc===t)return this.complete(e.completion,e.afterLoc),P(e),v}},catch:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.tryLoc===t){var o=e.completion;if("throw"===o.type){var r=o.arg;P(e)}return r}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,o){return this.delegate={iterator:T(t),resultName:e,nextLoc:o},"next"===this.method&&(this.arg=n),v}},t}(t.exports);try{regeneratorRuntime=n}catch(t){Function("r","regeneratorRuntime = r")(n)}},379:(t,n,e)=>{"use strict";var o,r=function(){var t={};return function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}t[n]=e}return t[n]}}(),i=[];function a(t){for(var n=-1,e=0;e<i.length;e++)if(i[e].identifier===t){n=e;break}return n}function s(t,n){for(var e={},o=[],r=0;r<t.length;r++){var s=t[r],c=n.base?s[0]+n.base:s[0],l=e[c]||0,u="".concat(c," ").concat(l);e[c]=l+1;var d=a(u),h={css:s[1],media:s[2],sourceMap:s[3]};-1!==d?(i[d].references++,i[d].updater(h)):i.push({identifier:u,updater:v(h,n),references:1}),o.push(u)}return o}function c(t){var n=document.createElement("style"),o=t.attributes||{};if(void 0===o.nonce){var i=e.nc;i&&(o.nonce=i)}if(Object.keys(o).forEach((function(t){n.setAttribute(t,o[t])})),"function"==typeof t.insert)t.insert(n);else{var a=r(t.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(n)}return n}var l,u=(l=[],function(t,n){return l[t]=n,l.filter(Boolean).join("\n")});function d(t,n,e,o){var r=e?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(t.styleSheet)t.styleSheet.cssText=u(n,r);else{var i=document.createTextNode(r),a=t.childNodes;a[n]&&t.removeChild(a[n]),a.length?t.insertBefore(i,a[n]):t.appendChild(i)}}function h(t,n,e){var o=e.css,r=e.media,i=e.sourceMap;if(r?t.setAttribute("media",r):t.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleSheet)t.styleSheet.cssText=o;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(o))}}var f=null,A=0;function v(t,n){var e,o,r;if(n.singleton){var i=A++;e=f||(f=c(n)),o=d.bind(null,e,i,!1),r=d.bind(null,e,i,!0)}else e=c(n),o=h.bind(null,e,n),r=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)};return o(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap)return;o(t=n)}else r()}}t.exports=function(t,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=(void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o));var e=s(t=t||[],n);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var o=0;o<e.length;o++){var r=a(e[o]);i[r].references--}for(var c=s(t,n),l=0;l<e.length;l++){var u=a(e[l]);0===i[u].references&&(i[u].updater(),i.splice(u,1))}e=c}}}}},n={};function e(o){var r=n[o];if(void 0!==r)return r.exports;var i=n[o]={id:o,exports:{}};return t[o](i,i.exports,e),i.exports}e.n=t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return e.d(n,{a:n}),n},e.d=(t,n)=>{for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})},e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),e(666),e(775)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYW52YXMtZGVtb3MvLi9zcmMvdG93ZXItb2YtaGFub2kvYW5pbWF0aW9uU3RhdGUuanMiLCJ3ZWJwYWNrOi8vY2FudmFzLWRlbW9zLy4vc3JjL3Rvd2VyLW9mLWhhbm9pL2Rpc2suanMiLCJ3ZWJwYWNrOi8vY2FudmFzLWRlbW9zLy4vc3JjL3Rvd2VyLW9mLWhhbm9pL3BlZy5qcyIsIndlYnBhY2s6Ly9jYW52YXMtZGVtb3MvLi9zcmMvdG93ZXItb2YtaGFub2kvYWxnb3JpdGhtLmpzIiwid2VicGFjazovL2NhbnZhcy1kZW1vcy8uL3NyYy90b3dlci1vZi1oYW5vaS9zdHlsZS5jc3M/OTFiOCIsIndlYnBhY2s6Ly9jYW52YXMtZGVtb3MvLi9zcmMvdG93ZXItb2YtaGFub2kvc2NyaXB0LmpzIiwid2VicGFjazovL2NhbnZhcy1kZW1vcy8uL3NyYy9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vY2FudmFzLWRlbW9zLy4vc3JjL3Rvd2VyLW9mLWhhbm9pL3N0eWxlLmNzcyIsIndlYnBhY2s6Ly9jYW52YXMtZGVtb3MvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL2NhbnZhcy1kZW1vcy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzIiwid2VicGFjazovL2NhbnZhcy1kZW1vcy8uL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vY2FudmFzLWRlbW9zLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL2NhbnZhcy1kZW1vcy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9jYW52YXMtZGVtb3Mvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vY2FudmFzLWRlbW9zL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9jYW52YXMtZGVtb3Mvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9jYW52YXMtZGVtb3Mvd2VicGFjay9zdGFydHVwIl0sIm5hbWVzIjpbIlN0YXRlIiwibW92ZXIiLCJzcGVlZCIsInRoaXMiLCJmaW5pc2hlZCIsImRlbHRhIiwiRXJyb3IiLCJGaW5pc2hlZFN0YXRlIiwiTW92ZURvd25TdGF0ZSIsInRvUGVnIiwiZGlza3MiLCJsZW5ndGgiLCJ5UG9zVGFyZ2V0IiwieVBvcyIsImRpc2siLCJNb3ZlQWNyb3NzU3RhdGUiLCJ4UG9zIiwiSW5pdGlhbFN0YXRlIiwiRGlzayIsInhQb3NJbml0aWFsIiwieVBvc0luaXRpYWwiLCJ3aWR0aCIsImNvbG9yIiwiY3R4IiwiYmVnaW5QYXRoIiwibGluZUNhcCIsInN0cm9rZVN0eWxlIiwibGluZVdpZHRoIiwibW92ZVRvIiwibGluZVRvIiwic3Ryb2tlIiwiUGVnIiwibmFtZSIsImhlaWdodCIsInB1c2giLCJ0ZXh0QWxpZ24iLCJmb250IiwiZmlsbFRleHQiLCJmb3JFYWNoIiwiZHJhdyIsInNvbHZlIiwibnVtRGlza3MiLCJzb3VyY2VQZWciLCJ0YXJnZXRQZWciLCJzcGFyZVBlZyIsIndpbmRvdyIsIm9ubG9hZCIsImN1cnJlbnRBbmltYXRpb25UZXh0IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImFuaW1hdGUiLCJjYW5jZWwiLCJwZWdzIiwiZGlza01vdmVyIiwiZHJhd1NjZW5lIiwidGltZVN0YW1wIiwiZHJhd0FkZGl0aW9uYWwiLCJjYW52YXMiLCJnZXRDb250ZXh0IiwiY2xlYXJSZWN0IiwicGVnIiwic2F2ZSIsInJlc3RvcmUiLCJEaXNrTW92ZXIiLCJmcm9tUGVnIiwic3BlZWRNdWx0aXBsaWVyIiwibGFzdEZyYW1lIiwiYW5pbWF0aW9uU3RhdGUiLCJmaW5pc2hlZENhbGxiYWNrIiwidmFsdWUiLCJwb3AiLCJyZXBsYWNlQ2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsImxhc3RDaGlsZCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInRpbWVzdGFtcCIsInVwZGF0ZSIsInB1c2hEaXNrIiwibW92ZSIsIm5leHQiLCJ0cyIsImluaXRpYWxpemVQZWdzIiwiYXBwZW5kQ2hpbGQiLCJhbmltYXRlQnV0dG9uIiwiYWRkRXZlbnRMaXN0ZW5lciIsImRpc2FibGVkIiwiZ2VuIiwiY2FsbFRhc2siLCJjYW5jZWxsZWQiLCJ0YXNrIiwiZG9uZSIsInNvdXJjZSIsInRhcmdldCIsInNwZWVkU2xpZGVyIiwib25pbnB1dCIsInBhcnNlSW50IiwiaW5pdGlhbGl6ZSIsIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwibW9kdWxlIiwiaWQiLCJpIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJtYXAiLCJpdGVtIiwiY29udGVudCIsImNvbmNhdCIsImpvaW4iLCJtb2R1bGVzIiwibWVkaWFRdWVyeSIsImRlZHVwZSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJfaSIsIl9hcnJheUxpa2VUb0FycmF5IiwiYXJyIiwibGVuIiwiYXJyMiIsIkFycmF5IiwiX2l0ZW0iLCJpc0FycmF5IiwiX2FycmF5V2l0aEhvbGVzIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJfcyIsIl9lIiwiX2FyciIsIl9uIiwiX2QiLCJjYWxsIiwiZXJyIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwibyIsIm1pbkxlbiIsIm4iLCJPYmplY3QiLCJwcm90b3R5cGUiLCJzbGljZSIsImNvbnN0cnVjdG9yIiwiZnJvbSIsInRlc3QiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJUeXBlRXJyb3IiLCJfbm9uSXRlcmFibGVSZXN0IiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlUm9vdCIsInJ1bnRpbWUiLCJ1bmRlZmluZWQiLCJPcCIsImhhc093biIsImhhc093blByb3BlcnR5IiwiJFN5bWJvbCIsIml0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJ0b1N0cmluZ1RhZ1N5bWJvbCIsInRvU3RyaW5nVGFnIiwiZGVmaW5lIiwib2JqIiwia2V5IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ3cmFwIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJzZWxmIiwidHJ5TG9jc0xpc3QiLCJwcm90b0dlbmVyYXRvciIsIkdlbmVyYXRvciIsImdlbmVyYXRvciIsImNyZWF0ZSIsImNvbnRleHQiLCJDb250ZXh0IiwiX2ludm9rZSIsInN0YXRlIiwiR2VuU3RhdGVTdXNwZW5kZWRTdGFydCIsIm1ldGhvZCIsImFyZyIsIkdlblN0YXRlRXhlY3V0aW5nIiwiR2VuU3RhdGVDb21wbGV0ZWQiLCJkb25lUmVzdWx0IiwiZGVsZWdhdGUiLCJkZWxlZ2F0ZVJlc3VsdCIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJDb250aW51ZVNlbnRpbmVsIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJyZWNvcmQiLCJ0cnlDYXRjaCIsInR5cGUiLCJHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkIiwibWFrZUludm9rZU1ldGhvZCIsImZuIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0UHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwidmFsdWVzIiwiR3AiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJBc3luY0l0ZXJhdG9yIiwiUHJvbWlzZUltcGwiLCJpbnZva2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVzdWx0IiwiX19hd2FpdCIsInRoZW4iLCJ1bndyYXBwZWQiLCJlcnJvciIsInByZXZpb3VzUHJvbWlzZSIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiaW5mbyIsInJlc3VsdE5hbWUiLCJuZXh0TG9jIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsImVudHJ5IiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJyZXNldCIsIml0ZXJhYmxlIiwiaXRlcmF0b3JNZXRob2QiLCJpc05hTiIsImRpc3BsYXlOYW1lIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbkZ1biIsImN0b3IiLCJtYXJrIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJhd3JhcCIsImFzeW5jIiwiUHJvbWlzZSIsIml0ZXIiLCJrZXlzIiwib2JqZWN0IiwicmV2ZXJzZSIsInNraXBUZW1wUmVzZXQiLCJwcmV2IiwiY2hhckF0Iiwic3RvcCIsInJvb3RSZWNvcmQiLCJydmFsIiwiZXhjZXB0aW9uIiwiaGFuZGxlIiwibG9jIiwiY2F1Z2h0IiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiZmluYWxseUVudHJ5IiwiY29tcGxldGUiLCJmaW5pc2giLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwicmVnZW5lcmF0b3JSdW50aW1lIiwiYWNjaWRlbnRhbFN0cmljdE1vZGUiLCJGdW5jdGlvbiIsIm1lbW8iLCJnZXRUYXJnZXQiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwic3R5bGVzSW5Eb20iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXgiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkU3R5bGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZSIsImNyZWF0ZUVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnQiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiZmlsdGVyIiwiQm9vbGVhbiIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJyZW1vdmUiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNzc05vZGUiLCJjaGlsZE5vZGVzIiwicmVtb3ZlQ2hpbGQiLCJpbnNlcnRCZWZvcmUiLCJhcHBseVRvVGFnIiwicmVtb3ZlQXR0cmlidXRlIiwiZmlyc3RDaGlsZCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJzdHlsZUluZGV4IiwiYmluZCIsInBhcmVudE5vZGUiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJuZXdPYmoiLCJhbGwiLCJhdG9iIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pbmRleCIsInNwbGljZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwiZ2V0IiwicHJvcCJdLCJtYXBwaW5ncyI6IjRuREFBTUEsRSxXQUNGLFdBQVlDLEVBQU9DLEdBQU8sVUFDdEJDLEtBQUtGLE1BQVFBLEVBQ2JFLEtBQUtELE1BQVFBLEVBQ2JDLEtBQUtDLFVBQVcsRSw4QkFHcEIsU0FBS0MsR0FDRCxNQUFNLElBQUlDLE1BQU0sMEIsa0JBR3BCLFdBQ0ksT0FBT0gsUyxLQUlGSSxFQUFiLDhCQUNJLFdBQVlO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QyxVQUVwQmQsRUFBWW9ELE9BQU9ELEVBQVEsSUFJL0JILEVBQWtCRSxPQ3pRbEJHLEVBQTJCLEdBRy9CLFNBQVNDLEVBQW9CQyxHQUU1QixJQUFJQyxFQUFlSCxFQUF5QkUsR0FDNUMsUUFBcUJ6TCxJQUFqQjBMLEVBQ0gsT0FBT0EsRUFBYW5QLFFBR3JCLElBQUlILEVBQVNtUCxFQUF5QkUsR0FBWSxDQUNqRHBQLEdBQUlvUCxFQUVKbFAsUUFBUyxJQU9WLE9BSEFvUCxFQUFvQkYsR0FBVXJQLEVBQVFBLEVBQU9HLFFBQVNpUCxHQUcvQ3BQLEVBQU9HLFFDcEJmaVAsRUFBb0IvTSxFQUFLckMsSUFDeEIsSUFBSXdQLEVBQVN4UCxHQUFVQSxFQUFPeVAsV0FDN0IsSUFBT3pQLEVBQWlCLFFBQ3hCLElBQU0sRUFFUCxPQURBb1AsRUFBb0JNLEVBQUVGLEVBQVEsQ0FBRUcsRUFBR0gsSUFDNUJBLEdDTFJKLEVBQW9CTSxFQUFJLENBQUN2UCxFQUFTeVAsS0FDakMsSUFBSSxJQUFJcEwsS0FBT29MLEVBQ1hSLEVBQW9Cak4sRUFBRXlOLEVBQVlwTCxLQUFTNEssRUFBb0JqTixFQUFFaEMsRUFBU3FFLElBQzVFbEMsT0FBT21DLGVBQWV0RSxFQUFTcUUsRUFBSyxDQUFFRSxZQUFZLEVBQU1tTCxJQUFLRCxFQUFXcEwsTUNKM0U0SyxFQUFvQmpOLEVBQUksQ0FBQ29DLEVBQUt1TCxJQUFVeE4sT0FBT0MsVUFBVXdCLGVBQWUvQixLQUFLdUMsRUFBS3VMLEdDR2xGVixFQUFvQixLQUNNQSxFQUFvQixNIiwiZmlsZSI6InRvd2VyLW9mLWhhbm9pLmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIFN0YXRlIHtcbiAgICBjb25zdHJ1Y3Rvcihtb3Zlciwgc3BlZWQpIHtcbiAgICAgICAgdGhpcy5tb3ZlciA9IG1vdmVyO1xuICAgICAgICB0aGlzLnNwZWVkID0gc3BlZWQ7XG4gICAgICAgIHRoaXMuZmluaXNoZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBtb3ZlKGRlbHRhKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdPdmVycmlkZSB0aGlzIG1ldGhvZCcpO1xuICAgIH1cblxuICAgIG5leHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEZpbmlzaGVkU3RhdGUgZXh0ZW5kcyBTdGF0ZSB7XG4gICAgY29uc3RydWN0b3IobW92ZXIsIHNwZWVkKSB7XG4gICAgICAgIHN1cGVyKG1vdmVyLCBzcGVlZCk7XG4gICAgICAgIHRoaXMuZmluaXNoZWQgPSB0cnVlO1xuICAgIH1cbn1cblxuY2xhc3MgTW92ZURvd25TdGF0ZSBleHRlbmRzIFN0YXRlIHtcbiAgICBjb25zdHJ1Y3Rvcihtb3Zlciwgc3BlZWQpIHtcbiAgICAgICAgc3VwZXIobW92ZXIsIHNwZWVkKTtcbiAgICAgICAgaWYgKHRoaXMubW92ZXIudG9QZWcuZGlza3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy55UG9zVGFyZ2V0ID0gdGhpcy5tb3Zlci50b1BlZy5kaXNrc1t0aGlzLm1vdmVyLnRvUGVnLmRpc2tzLmxlbmd0aCAtIDFdLnlQb3MgLSAyMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMueVBvc1RhcmdldCA9IDIzMDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG1vdmUoZGVsdGEpIHtcbiAgICAgICAgaWYgKHRoaXMubW92ZXIuZGlzay55UG9zIDwgdGhpcy55UG9zVGFyZ2V0KSB7XG4gICAgICAgICAgICB0aGlzLm1vdmVyLmRpc2sueVBvcyArPSB0aGlzLnNwZWVkICogZGVsdGE7XG4gICAgICAgICAgICBpZiAodGhpcy5tb3Zlci5kaXNrLnlQb3MgPj0gdGhpcy55UG9zVGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tb3Zlci5kaXNrLnlQb3MgPSB0aGlzLnlQb3NUYXJnZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBuZXh0KCkge1xuICAgICAgICBpZiAodGhpcy5tb3Zlci5kaXNrLnlQb3MgPT09IHRoaXMueVBvc1RhcmdldCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBGaW5pc2hlZFN0YXRlKHRoaXMubW92ZXIsIHRoaXMuc3BlZWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cblxuY2xhc3MgTW92ZUFjcm9zc1N0YXRlIGV4dGVuZHMgU3RhdGUge1xuICAgIG1vdmUoZGVsdGEpIHtcbiAgICAgICAgaWYgKHRoaXMubW92ZXIuZGlzay54UG9zIDwgdGhpcy5tb3Zlci50b1BlZy54UG9zKSB7XG4gICAgICAgICAgICB0aGlzLm1vdmVyLmRpc2sueFBvcyArPSB0aGlzLnNwZWVkICogZGVsdGE7XG4gICAgICAgICAgICBpZiAodGhpcy5tb3Zlci5kaXNrLnhQb3MgPiB0aGlzLm1vdmVyLnRvUGVnLnhQb3MpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1vdmVyLmRpc2sueFBvcyA9IHRoaXMubW92ZXIudG9QZWcueFBvcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLm1vdmVyLmRpc2sueFBvcyA+IHRoaXMubW92ZXIudG9QZWcueFBvcykge1xuICAgICAgICAgICAgdGhpcy5tb3Zlci5kaXNrLnhQb3MgLT0gdGhpcy5zcGVlZCAqIGRlbHRhO1xuICAgICAgICAgICAgaWYgKHRoaXMubW92ZXIuZGlzay54UG9zIDwgdGhpcy5tb3Zlci50b1BlZy54UG9zKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tb3Zlci5kaXNrLnhQb3MgPSB0aGlzLm1vdmVyLnRvUGVnLnhQb3M7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBuZXh0KCkge1xuICAgICAgICBpZiAodGhpcy5tb3Zlci5kaXNrLnhQb3MgPT09IHRoaXMubW92ZXIudG9QZWcueFBvcykge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBNb3ZlRG93blN0YXRlKHRoaXMubW92ZXIsIHRoaXMuc3BlZWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cblxuY2xhc3MgTW92ZVVwU3RhdGUgZXh0ZW5kcyBTdGF0ZSB7XG4gICAgbW92ZShkZWx0YSkge1xuICAgICAgICB0aGlzLm1vdmVyLmRpc2sueVBvcyAtPSB0aGlzLnNwZWVkICogZGVsdGE7XG4gICAgfVxuXG4gICAgbmV4dCgpIHtcbiAgICAgICAgaWYgKHRoaXMubW92ZXIuZGlzay55UG9zIDw9IDUwKSB7XG4gICAgICAgICAgICB0aGlzLm1vdmVyLmRpc2sueVBvcyA9IDUwO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBNb3ZlQWNyb3NzU3RhdGUodGhpcy5tb3ZlciwgdGhpcy5zcGVlZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgSW5pdGlhbFN0YXRlID0gTW92ZVVwU3RhdGU7XG4iLCIvKipcbiAqIFRoaXMgY2xhc3MgcmVwcmVzZW50cyBhIGRpc2sgdXNlZCBpbiB0aGUgVG93ZXIgb2YgSGFub2kgcHV6emxlLlxuICovXG5leHBvcnQgY2xhc3MgRGlzayB7XG4gICAgY29uc3RydWN0b3IoeFBvc0luaXRpYWwsIHlQb3NJbml0aWFsLCB3aWR0aCwgY29sb3IpIHtcbiAgICAgICAgdGhpcy54UG9zID0geFBvc0luaXRpYWw7XG4gICAgICAgIHRoaXMueVBvcyA9IHlQb3NJbml0aWFsO1xuICAgICAgICB0aGlzLndpZHRoID0gd2lkdGg7XG4gICAgICAgIHRoaXMuY29sb3IgPSBjb2xvclxuICAgIH1cblxuICAgIGRyYXcoY3R4KSB7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgY3R4LmxpbmVDYXAgPSAncm91bmQnO1xuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSB0aGlzLmNvbG9yO1xuICAgICAgICBjdHgubGluZVdpZHRoID0gMTU7XG4gICAgICAgIGN0eC5tb3ZlVG8odGhpcy54UG9zIC0gKDUgKiB0aGlzLndpZHRoKSwgdGhpcy55UG9zKTtcbiAgICAgICAgY3R4LmxpbmVUbyh0aGlzLnhQb3MgKyAoNSAqIHRoaXMud2lkdGgpLCB0aGlzLnlQb3MpO1xuICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgfVxufVxuIiwiLyoqXG4gKiBUaGlzIGNsYXNzIHJlcHJlc2VudHMgYSBwZWcgdXNlZCBpbiB0aGUgVG93ZXIgb2YgSGFub2kgcHV6emxlLlxuICovXG5leHBvcnQgY2xhc3MgUGVnIHtcbiAgICBjb25zdHJ1Y3RvcihuYW1lLCB4UG9zSW5pdGlhbCwgeVBvc0luaXRpYWwsIGRpc2tzKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMueFBvcyA9IHhQb3NJbml0aWFsO1xuICAgICAgICB0aGlzLnlQb3MgPSB5UG9zSW5pdGlhbDtcbiAgICAgICAgdGhpcy5kaXNrcyA9IGRpc2tzO1xuICAgICAgICB0aGlzLndpZHRoID0gNDA7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gMTMwO1xuICAgIH1cblxuICAgIHB1c2hEaXNrKGRpc2spIHtcbiAgICAgICAgaWYgKHRoaXMuZGlza3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZGlzay55UG9zID0gdGhpcy5kaXNrc1t0aGlzLmRpc2tzLmxlbmd0aCAtIDFdLnlQb3MgLSAyMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRpc2sueVBvcyA9IDIzMDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRpc2tzLnB1c2goZGlzayk7XG4gICAgICAgIGRpc2sueFBvcyA9IHRoaXMueFBvcztcbiAgICB9XG5cbiAgICBkcmF3KGN0eCkge1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5saW5lQ2FwID0gJ3NxdWFyZSc7XG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9ICdicm93bic7XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSA1O1xuICAgICAgICBjdHgubW92ZVRvKHRoaXMueFBvcywgdGhpcy55UG9zKTtcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICBjdHgubW92ZVRvKHRoaXMueFBvcywgdGhpcy55UG9zKTtcbiAgICAgICAgY3R4LmxpbmVUbyh0aGlzLnhQb3MgLSB0aGlzLndpZHRoLCB0aGlzLnlQb3MpO1xuICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICAgIGN0eC5tb3ZlVG8odGhpcy54UG9zLCB0aGlzLnlQb3MpO1xuICAgICAgICBjdHgubGluZVRvKHRoaXMueFBvcyArIHRoaXMud2lkdGgsIHRoaXMueVBvcyk7XG4gICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgY3R4Lm1vdmVUbyh0aGlzLnhQb3MsIHRoaXMueVBvcyk7XG4gICAgICAgIGN0eC5saW5lVG8odGhpcy54UG9zLCB0aGlzLnlQb3MgLSB0aGlzLmhlaWdodCk7XG4gICAgICAgIGN0eC5zdHJva2UoKTtcblxuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSAnYmxhY2snO1xuICAgICAgICBjdHgubGluZVdpZHRoID0gMTtcbiAgICAgICAgY3R4LnRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgICAgICBjdHguZm9udCA9ICcyNHB4IHNhbnMtc2VyaWYnO1xuICAgICAgICBjdHguZmlsbFRleHQodGhpcy5uYW1lLCB0aGlzLnhQb3MsIHRoaXMueVBvcyArIDM1KTtcblxuICAgICAgICB0aGlzLmRpc2tzLmZvckVhY2goKGRpc2spID0+IHtcbiAgICAgICAgICAgIGRpc2suZHJhdyhjdHgpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCIvKipcbiAqIFlpZWxkcyB0YXNrcyB0aGF0IHdpbGwgc29sdmUgdGhlIHRvd2VyIHdoZW4gZXhlY3V0ZWQgc2VxdWVudGlhbGx5LlxuICpcbiAqIEBwYXJhbSBudW1EaXNrcyBUaGUgbnVtYmVyIG9mIGRpc2tzIHRoZSBwdXp6bGUgY29udGFpbnNcbiAqIEBwYXJhbSBzb3VyY2VQZWcgVGhlIHBlZyB3ZSB3YW50IHRvIG1vdmUgZGlza3MgZnJvbVxuICogQHBhcmFtIHRhcmdldFBlZyBUaGUgcGVnIHdlIHdhbnQgdG8gbW92ZSBkaXNrcyB0b1xuICogQHBhcmFtIHNwYXJlUGVnIFRoZSBwZWcgd2UgY2FuIHVzZSB0byBtb3ZlIHBlZ3MgdG8gdGVtcG9yYXJpbHlcbiAqL1xuZXhwb3J0IGNvbnN0IHNvbHZlID0gZnVuY3Rpb24gKihudW1EaXNrcywgc291cmNlUGVnLCB0YXJnZXRQZWcsIHNwYXJlUGVnKSB7XG4gICAgaWYgKG51bURpc2tzID4gMCkge1xuICAgICAgICB5aWVsZCogc29sdmUobnVtRGlza3MgLSAxLCBzb3VyY2VQZWcsIHNwYXJlUGVnLCB0YXJnZXRQZWcpO1xuICAgICAgICB5aWVsZCB7J2FjdGlvbic6ICdtb3ZlJyxcbiAgICAgICAgICAgICdzb3VyY2UnOiBzb3VyY2VQZWcsXG4gICAgICAgICAgICAndGFyZ2V0JzogdGFyZ2V0UGVnfTtcbiAgICAgICAgeWllbGQqIHNvbHZlKG51bURpc2tzIC0gMSwgc3BhcmVQZWcsIHRhcmdldFBlZywgc291cmNlUGVnKTtcbiAgICB9XG59O1xuIiwiaW1wb3J0IGFwaSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMF0udXNlWzFdIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsImltcG9ydCAncmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lJztcbmltcG9ydCB7RmluaXNoZWRTdGF0ZSwgSW5pdGlhbFN0YXRlfSBmcm9tICcuL2FuaW1hdGlvblN0YXRlJztcbmltcG9ydCB7RGlza30gZnJvbSAnLi9kaXNrJztcbmltcG9ydCB7UGVnfSBmcm9tICcuL3BlZyc7XG5pbXBvcnQge3NvbHZlfSBmcm9tICcuL2FsZ29yaXRobSc7XG5pbXBvcnQge3N0eWxlc30gZnJvbSAnLi9zdHlsZS5jc3MnOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cbndpbmRvdy5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgY3VycmVudEFuaW1hdGlvblRleHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY3VycmVudEFuaW1hdGlvblRleHQnKTtcbiAgICBsZXQgYW5pbWF0ZSA9IGZhbHNlO1xuICAgIGxldCBjYW5jZWwgPSBmYWxzZTtcbiAgICBsZXQgc3BlZWQgPSAxO1xuICAgIGxldCBwZWdzID0gW107XG4gICAgbGV0IGRpc2tNb3ZlciA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBEcmF3cyB0aGUgc2NlbmUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZHJhd0FkZGl0aW9uYWwgQW4gb3B0aW9uYWwgZnVuY3Rpb24gdGhhdCBkcmF3cyBhbnl0aGluZyBleHRyYVxuICAgICAqIGFmdGVyIHdlJ3ZlIGRyYXduIGV2ZXJ5dGhpbmcgZWxzZVxuICAgICAqL1xuICAgIGNvbnN0IGRyYXdTY2VuZSA9IGZ1bmN0aW9uICh0aW1lU3RhbXAsIGRyYXdBZGRpdGlvbmFsKSB7XG4gICAgICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdteUNhbnZhcycpO1xuICAgICAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcblxuICAgICAgICAvLyBDbGVhciB0aGUgc2NlbmVcbiAgICAgICAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuXG4gICAgICAgIC8vIExvb3AgdGhyb3VnaCB0aGUgcGVncyBhbmQgZHJhdyB0aGVtXG4gICAgICAgIC8vIEVhY2ggcGVnJ3MgZHJhdyBmdW5jdGlvbiBkcmF3cyB0aGUgcGVncyBhbHNvXG4gICAgICAgIHBlZ3MuZm9yRWFjaChmdW5jdGlvbiAocGVnKSB7XG4gICAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgICAgcGVnLmRyYXcoY3R4KTtcbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh0eXBlb2YgZHJhd0FkZGl0aW9uYWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgICBkcmF3QWRkaXRpb25hbChjdHgpO1xuICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBjbGFzcyBEaXNrTW92ZXIge1xuICAgICAgICBjb25zdHJ1Y3Rvcihmcm9tUGVnLCB0b1BlZykge1xuICAgICAgICAgICAgdGhpcy5zcGVlZE11bHRpcGxpZXIgPSA1O1xuICAgICAgICAgICAgdGhpcy5mcm9tUGVnID0gZnJvbVBlZztcbiAgICAgICAgICAgIHRoaXMudG9QZWcgPSB0b1BlZztcbiAgICAgICAgICAgIHRoaXMubGFzdEZyYW1lID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uU3RhdGUgPSBuZXcgSW5pdGlhbFN0YXRlKHRoaXMsIHNwZWVkICogdGhpcy5zcGVlZE11bHRpcGxpZXIpO1xuICAgICAgICAgICAgdGhpcy5kaXNrID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuZmluaXNoZWRDYWxsYmFjayA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgc3BlZWQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hbmltYXRpb25TdGF0ZS5zcGVlZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHNldCBzcGVlZCh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5hbmltYXRpb25TdGF0ZS5zcGVlZCA9IHZhbHVlICogdGhpcy5zcGVlZE11bHRpcGxpZXI7XG4gICAgICAgIH1cblxuICAgICAgICBtb3ZlKGZpbmlzaGVkQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRoaXMuZmluaXNoZWRDYWxsYmFjayA9IGZpbmlzaGVkQ2FsbGJhY2s7XG4gICAgICAgICAgICB0aGlzLmRpc2sgPSB0aGlzLmZyb21QZWcuZGlza3MucG9wKCk7XG4gICAgICAgICAgICBpZiAoIWNhbmNlbCkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRBbmltYXRpb25UZXh0LnJlcGxhY2VDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnTW92aW5nICcgKyB0aGlzLmRpc2suY29sb3IgKyAnIGRpc2sgZnJvbSAnICsgdGhpcy5mcm9tUGVnLm5hbWUgKyAnIHRvICcgKyB0aGlzLnRvUGVnLm5hbWUpLCBjdXJyZW50QW5pbWF0aW9uVGV4dC5sYXN0Q2hpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYW5pbWF0ZSA9IHRydWU7XG4gICAgICAgICAgICBpZiAoIWNhbmNlbCkge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKHRpbWVzdGFtcCkgPT4gdGhpcy51cGRhdGUodGltZXN0YW1wKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjYW5jZWwoKSB7XG4gICAgICAgICAgICBhbmltYXRlID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvblN0YXRlID0gbmV3IEZpbmlzaGVkU3RhdGUodGhpcy5tb3Zlciwgc3BlZWQgKiA1KTtcbiAgICAgICAgICAgIGlmICh0aGlzLmRpc2spIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRvUGVnLnB1c2hEaXNrKHRoaXMuZGlzayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB1cGRhdGUodGltZXN0YW1wKSB7XG4gICAgICAgICAgICBsZXQgZGVsdGEgPSAwO1xuICAgICAgICAgICAgaWYgKHRoaXMubGFzdEZyYW1lICYmIHRpbWVzdGFtcCkge1xuICAgICAgICAgICAgICAgIGRlbHRhID0gKHRpbWVzdGFtcCAtIHRoaXMubGFzdEZyYW1lKSAvIDEwMDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5hbmltYXRpb25TdGF0ZS5tb3ZlKGRlbHRhKTtcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uU3RhdGUgPSB0aGlzLmFuaW1hdGlvblN0YXRlLm5leHQoKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuYW5pbWF0aW9uU3RhdGUuZmluaXNoZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRvUGVnLnB1c2hEaXNrKHRoaXMuZGlzayk7XG4gICAgICAgICAgICAgICAgYW5pbWF0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMuZmluaXNoZWRDYWxsYmFjaygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgIGRyYXdTY2VuZShudWxsLCAoY3R4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzay5kcmF3KGN0eCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmxhc3RGcmFtZSA9IHRpbWVzdGFtcDtcbiAgICAgICAgICAgICAgICBpZiAoYW5pbWF0ZSkge1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCh0cykgPT4gdGhpcy51cGRhdGUodHMpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHVwIHRoZSBwZWdzIGFuZCBkaXNrcy4gQWxzbyB1c2VkIHRvIHJlc2V0IHRoaW5ncy5cbiAgICAgKi9cbiAgICBjb25zdCBpbml0aWFsaXplUGVncyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcGVncyA9IFtcbiAgICAgICAgICAgIG5ldyBQZWcoJ0EnLCAxMDAsIDI1MCwgW1xuICAgICAgICAgICAgICAgIG5ldyBEaXNrKDEwMCwgMjMwLCA1LCAncHVycGxlJyksXG4gICAgICAgICAgICAgICAgbmV3IERpc2soMTAwLCAyMTAsIDQsICdibHVlJyksXG4gICAgICAgICAgICAgICAgbmV3IERpc2soMTAwLCAxOTAsIDMsICdncmVlbicpLFxuICAgICAgICAgICAgICAgIG5ldyBEaXNrKDEwMCwgMTcwLCAyLCAnb3JhbmdlJyksXG4gICAgICAgICAgICAgICAgbmV3IERpc2soMTAwLCAxNTAsIDEsICdyZWQnKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgbmV3IFBlZygnQicsIDMwMCwgMjUwLCBbXSksXG4gICAgICAgICAgICBuZXcgUGVnKCdDJywgNTAwLCAyNTAsIFtdKSxcbiAgICAgICAgXTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0IGV2ZXJ5dGhpbmcgdXAgc3VjaCBhcyBldmVudCBoYW5kbGVycyBhbmQgdGhlIGNhbnZhc1xuICAgICAqL1xuICAgIGNvbnN0IGluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGN1cnJlbnRBbmltYXRpb25UZXh0LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCdQcmVzcyB0aGUgR28gYnV0dG9uIHRvIGJlZ2luOicpKTtcbiAgICAgICAgaW5pdGlhbGl6ZVBlZ3MoKTtcblxuICAgICAgICBjb25zdCBhbmltYXRlQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FuaW1hdGVCdXR0b24nKTtcbiAgICAgICAgYW5pbWF0ZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGFuaW1hdGVCdXR0b24uZGlzYWJsZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICAvLyBjYWxsIHRoZSBhbGdvcml0aG0gdG8gZ2V0IHRoZSBsaXN0IG9mIHRhc2tzXG4gICAgICAgICAgICAvLyB0aGUgdGFza3MgdGFrZSBhIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgcnVucyB3aGVuIGl0IGNvbXBsZXRlc1xuICAgICAgICAgICAgY29uc3QgdGFza3MgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IGdlbiA9IHNvbHZlKHBlZ3NbMF0uZGlza3MubGVuZ3RoLCBwZWdzWzBdLCBwZWdzWzJdLCBwZWdzWzFdLCB0YXNrcyk7XG5cbiAgICAgICAgICAgIGNvbnN0IGNhbGxUYXNrID0gZnVuY3Rpb24gKGNhbmNlbGxlZCwgdGFzaykge1xuICAgICAgICAgICAgICAgIGlmICh0YXNrLmRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gd2UncmUgZmluaXNoZWQgbm93XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZHJhd1NjZW5lKTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudEFuaW1hdGlvblRleHQucmVwbGFjZUNoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCdBbGwgZmluaXNoZWQuIFByZXNzIHJlc2V0IHRvIHN0YXJ0IG92ZXI6JyksIGN1cnJlbnRBbmltYXRpb25UZXh0Lmxhc3RDaGlsZCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjYW5jZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbmNlbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRhc2sudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZnJvbVBlZyA9IHRhc2sudmFsdWUuc291cmNlO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0b1BlZyA9IHRhc2sudmFsdWUudGFyZ2V0O1xuXG4gICAgICAgICAgICAgICAgICAgIGRpc2tNb3ZlciA9IG5ldyBEaXNrTW92ZXIoZnJvbVBlZywgdG9QZWcpO1xuICAgICAgICAgICAgICAgICAgICBkaXNrTW92ZXIubW92ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsVGFzayhjYW5jZWwsIGdlbi5uZXh0KCkpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vIGNhbGwgdGhlIG5leHQgdGFza1xuICAgICAgICAgICAgY2FsbFRhc2soY2FuY2VsLCBnZW4ubmV4dCgpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgcmVzZXRCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVzZXRCdXR0b24nKTtcbiAgICAgICAgcmVzZXRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjYW5jZWwgPSB0cnVlO1xuICAgICAgICAgICAgY3VycmVudEFuaW1hdGlvblRleHQucmVwbGFjZUNoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCdSZXNldHRpbmcnKSwgY3VycmVudEFuaW1hdGlvblRleHQubGFzdENoaWxkKTtcbiAgICAgICAgICAgIGlmIChkaXNrTW92ZXIpIHtcbiAgICAgICAgICAgICAgICBkaXNrTW92ZXIuY2FuY2VsKCk7XG4gICAgICAgICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGVCdXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50QW5pbWF0aW9uVGV4dC5yZXBsYWNlQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJ1ByZXNzIHRoZSBHbyBidXR0b24gdG8gYmVnaW46JyksIGN1cnJlbnRBbmltYXRpb25UZXh0Lmxhc3RDaGlsZCk7XG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxpemVQZWdzKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gZHJhdyBvbmUgZnJhbWUgYWZ0ZXIgYSByZXNldFxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGRyYXdTY2VuZSk7XG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBzcGVlZFNsaWRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzcGVlZFNsaWRlcicpO1xuICAgICAgICBzcGVlZFNsaWRlci5vbmlucHV0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc3BlZWQgPSBwYXJzZUludChzcGVlZFNsaWRlci52YWx1ZSwgMTApO1xuICAgICAgICAgICAgaWYgKGRpc2tNb3Zlcikge1xuICAgICAgICAgICAgICAgIGRpc2tNb3Zlci5zcGVlZCA9IHNwZWVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBzcGVlZCA9IHBhcnNlSW50KHNwZWVkU2xpZGVyLnZhbHVlLCAxMCk7XG4gICAgICAgIGlmIChkaXNrTW92ZXIpIHtcbiAgICAgICAgICAgIGRpc2tNb3Zlci5zcGVlZCA9IHNwZWVkO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZHJhdyBvbmUgZnJhbWUgdG8gYmVnaW4gd2l0aFxuICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGRyYXdTY2VuZSk7XG4gICAgfTtcblxuICAgIGluaXRpYWxpemUoKTtcbn07XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIjpyb290IHtcXG4gICAgLS1iYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gICAgLS1tYWluLWNvbG9yOiByZ2IoNjMsIDExMSwgMTM5KTtcXG4gICAgLS10ZXh0LWNvbG9yOiBibGFjaztcXG4gICAgLS1kaXNhYmxlZC1jb2xvcjogcmdiKDIwNywyMDcsMjA3KTtcXG4gICAgLS1ob3Zlci1jb2xvcjogcmdiKDEyNSwgMTc3LCAyNDcpO1xcbiAgICAtLXZpc2l0ZWQtY29sb3I6IHJnYigxMDcsIDgyLCAxMzkpO1xcbiAgICAtLWhvdmVyLXZpc2l0ZWQtY29sb3I6IHJnYigxNjgsIDEyOSwgMjE4KTtcXG59XFxuXFxuLyogVXNlIGJveCBzaXppbmcgKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vYm94LXNpemluZy8pICovXFxuaHRtbCB7XFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcbiosICo6YmVmb3JlLCAqOmFmdGVyIHtcXG4gICAgYm94LXNpemluZzogaW5oZXJpdDtcXG59XFxuXFxuXFxuYm9keSB7XFxuICAgIG1hcmdpbjogM3B4O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmFja2dyb3VuZC1jb2xvcik7XFxuICAgIGNvbG9yOiBibGFjaztcXG4gICAgY29sb3I6IHZhcigtLXRleHQtY29sb3IpO1xcbn1cXG5cXG5hcnRpY2xlIHtcXG4gICAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1iYWNrZ3JvdW5kLWNvbG9yKTtcXG59XFxuXFxuaGVhZGVyIHtcXG4gICAgY29sb3I6IHJnYig2MywgMTExLCAxMzkpO1xcbiAgICBjb2xvcjogdmFyKC0tbWFpbi1jb2xvcik7XFxufVxcblxcbmJ1dHRvbiB7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYig2MywgMTExLCAxMzkpO1xcbiAgICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1tYWluLWNvbG9yKTtcXG4gICAgcGFkZGluZzogMWVtIDNlbTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJhY2tncm91bmQtY29sb3IpO1xcbiAgICBjb2xvcjogcmdiKDYzLCAxMTEsIDEzOSk7XFxuICAgIGNvbG9yOiB2YXIoLS1tYWluLWNvbG9yKTtcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxufVxcblxcbmJ1dHRvbjpkaXNhYmxlZCB7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYigyMDcsMjA3LDIwNyk7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWRpc2FibGVkLWNvbG9yKTtcXG4gICAgcGFkZGluZzogMWVtIDNlbTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJhY2tncm91bmQtY29sb3IpO1xcbiAgICBjb2xvcjogcmdiKDIwNywyMDcsMjA3KTtcXG4gICAgY29sb3I6IHZhcigtLWRpc2FibGVkLWNvbG9yKTtcXG59XFxuXFxuYnV0dG9uOmRpc2FibGVkOmhvdmVyIHtcXG4gICAgYm9yZGVyOiAxcHggc29saWQgcmdiKDIwNywyMDcsMjA3KTtcXG4gICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tZGlzYWJsZWQtY29sb3IpO1xcbiAgICBwYWRkaW5nOiAxZW0gM2VtO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmFja2dyb3VuZC1jb2xvcik7XFxuICAgIGNvbG9yOiByZ2IoMjA3LDIwNywyMDcpO1xcbiAgICBjb2xvcjogdmFyKC0tZGlzYWJsZWQtY29sb3IpO1xcbn1cXG5cXG5idXR0b246YWN0aXZlLFxcbmJ1dHRvbjpmb2N1cyxcXG5idXR0b246aG92ZXIge1xcbiAgICBwYWRkaW5nOiAxZW0gM2VtO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoNjMsIDExMSwgMTM5KTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbWFpbi1jb2xvcik7XFxuICAgIGNvbG9yOiB3aGl0ZTtcXG4gICAgY29sb3I6IHZhcigtLWJhY2tncm91bmQtY29sb3IpO1xcbiAgICBib3JkZXI6IDFweCBzb2xpZCByZ2IoNjMsIDExMSwgMTM5KTtcXG4gICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tbWFpbi1jb2xvcik7XFxufVxcblxcbmEge1xcbiAgICBjb2xvcjogcmdiKDYzLCAxMTEsIDEzOSk7XFxuICAgIGNvbG9yOiB2YXIoLS1tYWluLWNvbG9yKTtcXG59XFxuYTp2aXNpdGVkIHtcXG4gICAgY29sb3I6IHJnYigxMDcsIDgyLCAxMzkpO1xcbiAgICBjb2xvcjogdmFyKC0tdmlzaXRlZC1jb2xvcik7XFxufVxcbmE6aG92ZXIge1xcbiAgICBjb2xvcjogcmdiKDEyNSwgMTc3LCAyNDcpO1xcbiAgICBjb2xvcjogdmFyKC0taG92ZXItY29sb3IpO1xcbn1cXG5hOmhvdmVyOnZpc2l0ZWQge1xcbiAgICBjb2xvcjogcmdiKDE2OCwgMTI5LCAyMTgpO1xcbiAgICBjb2xvcjogdmFyKC0taG92ZXItdmlzaXRlZC1jb2xvcik7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7SUFDSSx5QkFBeUI7SUFDekIsK0JBQStCO0lBQy9CLG1CQUFtQjtJQUNuQixrQ0FBMEI7SUFDMUIsaUNBQWlDO0lBQ2pDLGtDQUFrQztJQUNsQyx5Q0FBeUM7QUFDN0M7O0FBRUEsd0RBQXdEO0FBQ3hEO0lBQ0ksc0JBQXNCO0FBQzFCO0FBQ0E7SUFDSSxtQkFBbUI7QUFDdkI7OztBQUdBO0lBQ0ksV0FBVztJQUNYLHVCQUF5QztJQUF6Qyx5Q0FBeUM7SUFDekMsWUFBd0I7SUFBeEIsd0JBQXdCO0FBQzVCOztBQUVBO0lBQ0ksdUJBQXVCO0lBQ3ZCLHVCQUF5QztJQUF6Qyx5Q0FBeUM7QUFDN0M7O0FBRUE7SUFDSSx3QkFBd0I7SUFBeEIsd0JBQXdCO0FBQzVCOztBQUVBO0lBQ0ksbUNBQW1DO0lBQW5DLG1DQUFtQztJQUNuQyxnQkFBZ0I7SUFDaEIsdUJBQXlDO0lBQXpDLHlDQUF5QztJQUN6Qyx3QkFBd0I7SUFBeEIsd0JBQXdCO0lBQ3hCLGlCQUFpQjtBQUNyQjs7QUFFQTtJQUNJLGtDQUF1QztJQUF2Qyx1Q0FBdUM7SUFDdkMsZ0JBQWdCO0lBQ2hCLHVCQUF5QztJQUF6Qyx5Q0FBeUM7SUFDekMsdUJBQTRCO0lBQTVCLDRCQUE0QjtBQUNoQzs7QUFFQTtJQUNJLGtDQUF1QztJQUF2Qyx1Q0FBdUM7SUFDdkMsZ0JBQWdCO0lBQ2hCLHVCQUF5QztJQUF6Qyx5Q0FBeUM7SUFDekMsdUJBQTRCO0lBQTVCLDRCQUE0QjtBQUNoQzs7QUFFQTs7O0lBR0ksZ0JBQWdCO0lBQ2hCLG1DQUFtQztJQUFuQyxtQ0FBbUM7SUFDbkMsWUFBOEI7SUFBOUIsOEJBQThCO0lBQzlCLG1DQUFtQztJQUFuQyxtQ0FBbUM7QUFDdkM7O0FBRUE7SUFDSSx3QkFBd0I7SUFBeEIsd0JBQXdCO0FBQzVCO0FBQ0E7SUFDSSx3QkFBMkI7SUFBM0IsMkJBQTJCO0FBQy9CO0FBQ0E7SUFDSSx5QkFBeUI7SUFBekIseUJBQXlCO0FBQzdCO0FBQ0E7SUFDSSx5QkFBaUM7SUFBakMsaUNBQWlDO0FBQ3JDXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIjpyb290IHtcXG4gICAgLS1iYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gICAgLS1tYWluLWNvbG9yOiByZ2IoNjMsIDExMSwgMTM5KTtcXG4gICAgLS10ZXh0LWNvbG9yOiBibGFjaztcXG4gICAgLS1kaXNhYmxlZC1jb2xvcjogZ3JheSg4Myk7XFxuICAgIC0taG92ZXItY29sb3I6IHJnYigxMjUsIDE3NywgMjQ3KTtcXG4gICAgLS12aXNpdGVkLWNvbG9yOiByZ2IoMTA3LCA4MiwgMTM5KTtcXG4gICAgLS1ob3Zlci12aXNpdGVkLWNvbG9yOiByZ2IoMTY4LCAxMjksIDIxOCk7XFxufVxcblxcbi8qIFVzZSBib3ggc2l6aW5nIChodHRwczovL2Nzcy10cmlja3MuY29tL2JveC1zaXppbmcvKSAqL1xcbmh0bWwge1xcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG4qLCAqOmJlZm9yZSwgKjphZnRlciB7XFxuICAgIGJveC1zaXppbmc6IGluaGVyaXQ7XFxufVxcblxcblxcbmJvZHkge1xcbiAgICBtYXJnaW46IDNweDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmFja2dyb3VuZC1jb2xvcik7XFxuICAgIGNvbG9yOiB2YXIoLS10ZXh0LWNvbG9yKTtcXG59XFxuXFxuYXJ0aWNsZSB7XFxuICAgIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1iYWNrZ3JvdW5kLWNvbG9yKTtcXG59XFxuXFxuaGVhZGVyIHtcXG4gICAgY29sb3I6IHZhcigtLW1haW4tY29sb3IpO1xcbn1cXG5cXG5idXR0b24ge1xcbiAgICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1tYWluLWNvbG9yKTtcXG4gICAgcGFkZGluZzogMWVtIDNlbTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmFja2dyb3VuZC1jb2xvcik7XFxuICAgIGNvbG9yOiB2YXIoLS1tYWluLWNvbG9yKTtcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxufVxcblxcbmJ1dHRvbjpkaXNhYmxlZCB7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWRpc2FibGVkLWNvbG9yKTtcXG4gICAgcGFkZGluZzogMWVtIDNlbTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmFja2dyb3VuZC1jb2xvcik7XFxuICAgIGNvbG9yOiB2YXIoLS1kaXNhYmxlZC1jb2xvcik7XFxufVxcblxcbmJ1dHRvbjpkaXNhYmxlZDpob3ZlciB7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWRpc2FibGVkLWNvbG9yKTtcXG4gICAgcGFkZGluZzogMWVtIDNlbTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmFja2dyb3VuZC1jb2xvcik7XFxuICAgIGNvbG9yOiB2YXIoLS1kaXNhYmxlZC1jb2xvcik7XFxufVxcblxcbmJ1dHRvbjphY3RpdmUsXFxuYnV0dG9uOmZvY3VzLFxcbmJ1dHRvbjpob3ZlciB7XFxuICAgIHBhZGRpbmc6IDFlbSAzZW07XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW1haW4tY29sb3IpO1xcbiAgICBjb2xvcjogdmFyKC0tYmFja2dyb3VuZC1jb2xvcik7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLW1haW4tY29sb3IpO1xcbn1cXG5cXG5hIHtcXG4gICAgY29sb3I6IHZhcigtLW1haW4tY29sb3IpO1xcbn1cXG5hOnZpc2l0ZWQge1xcbiAgICBjb2xvcjogdmFyKC0tdmlzaXRlZC1jb2xvcik7XFxufVxcbmE6aG92ZXIge1xcbiAgICBjb2xvcjogdmFyKC0taG92ZXItY29sb3IpO1xcbn1cXG5hOmhvdmVyOnZpc2l0ZWQge1xcbiAgICBjb2xvcjogdmFyKC0taG92ZXItdmlzaXRlZC1jb2xvcik7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzBfX18gZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMF0udXNlWzFdIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi9zdHlsZS5jc3NcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmkoX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8wX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIiNteUNhbnZhcyB7XFxuICAgIGJvcmRlcjogM3B4IHNvbGlkIHZhcigtLW1haW4tY29sb3IpO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgaGVpZ2h0OiAzMDBweDtcXG59XFxuXFxuZGl2LmFjdGlvbi1jb250cm9scyB7XFxuICAgIHdpZHRoOiAxMDAlO1xcbn1cXG5kaXYuYWN0aW9uLWNvbnRyb2xzID4gYnV0dG9uIHtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XFxufVxcblxcbmRpdi5zcGVlZC1jb250cm9scyB7XFxufVxcblxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDIyOHB4KSB7XFxuICAgIGRpdi5hY3Rpb24tY29udHJvbHMgPiBidXR0b24ge1xcbiAgICAgICAgd2lkdGg6IGF1dG87XFxuICAgIH1cXG59XFxuXFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNDc1cHgpIHtcXG4gICAgZGl2LmFjdGlvbi1jb250cm9scyB7XFxuICAgICAgICB3aWR0aDogNTAlO1xcbiAgICAgICAgZmxvYXQ6IGxlZnQ7XFxuICAgIH1cXG4gICAgZGl2LmFjdGlvbi1jb250cm9scyA+IGJ1dHRvbiB7XFxuICAgICAgICB3aWR0aDogYXV0bztcXG4gICAgICAgIG1hcmdpbi1ib3R0b206IDA7XFxuICAgIH1cXG5cXG4gICAgZGl2LnNwZWVkLWNvbnRyb2xzIHtcXG4gICAgICAgIHdpZHRoOiA1MCU7XFxuICAgICAgICBmbG9hdDogbGVmdDtcXG4gICAgfVxcbn1cXG5cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2MDZweCkge1xcbiAgICAjbXlDYW52YXMge1xcbiAgICAgICAgd2lkdGg6IDYwMHB4O1xcbiAgICB9XFxuXFxuICAgIGRpdi5hY3Rpb24tY29udHJvbHMge1xcbiAgICAgICAgd2lkdGg6IDMwMHB4O1xcbiAgICAgICAgZmxvYXQ6IGxlZnQ7XFxuICAgIH1cXG5cXG4gICAgZGl2LnNwZWVkLWNvbnRyb2xzIHtcXG4gICAgICAgIHdpZHRoOiAzMDBweDtcXG4gICAgICAgIGZsb2F0OiBsZWZ0O1xcbiAgICB9XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy90b3dlci1vZi1oYW5vaS9zdHlsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBRUE7SUFDSSxtQ0FBbUM7SUFDbkMsV0FBVztJQUNYLGFBQWE7QUFDakI7O0FBRUE7SUFDSSxXQUFXO0FBQ2Y7QUFDQTtJQUNJLFdBQVc7SUFDWCxtQkFBbUI7QUFDdkI7O0FBRUE7QUFDQTs7QUFFQTtJQUNJO1FBQ0ksV0FBVztJQUNmO0FBQ0o7O0FBRUE7SUFDSTtRQUNJLFVBQVU7UUFDVixXQUFXO0lBQ2Y7SUFDQTtRQUNJLFdBQVc7UUFDWCxnQkFBZ0I7SUFDcEI7O0lBRUE7UUFDSSxVQUFVO1FBQ1YsV0FBVztJQUNmO0FBQ0o7O0FBRUE7SUFDSTtRQUNJLFlBQVk7SUFDaEI7O0lBRUE7UUFDSSxZQUFZO1FBQ1osV0FBVztJQUNmOztJQUVBO1FBQ0ksWUFBWTtRQUNaLFdBQVc7SUFDZjtBQUNKXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBpbXBvcnQgXFxcIi4uL3N0eWxlLmNzc1xcXCI7XFxuXFxuI215Q2FudmFzIHtcXG4gICAgYm9yZGVyOiAzcHggc29saWQgdmFyKC0tbWFpbi1jb2xvcik7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBoZWlnaHQ6IDMwMHB4O1xcbn1cXG5cXG5kaXYuYWN0aW9uLWNvbnRyb2xzIHtcXG4gICAgd2lkdGg6IDEwMCU7XFxufVxcbmRpdi5hY3Rpb24tY29udHJvbHMgPiBidXR0b24ge1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcXG59XFxuXFxuZGl2LnNwZWVkLWNvbnRyb2xzIHtcXG59XFxuXFxuQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMjI4cHgpIHtcXG4gICAgZGl2LmFjdGlvbi1jb250cm9scyA+IGJ1dHRvbiB7XFxuICAgICAgICB3aWR0aDogYXV0bztcXG4gICAgfVxcbn1cXG5cXG5AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA0NzVweCkge1xcbiAgICBkaXYuYWN0aW9uLWNvbnRyb2xzIHtcXG4gICAgICAgIHdpZHRoOiA1MCU7XFxuICAgICAgICBmbG9hdDogbGVmdDtcXG4gICAgfVxcbiAgICBkaXYuYWN0aW9uLWNvbnRyb2xzID4gYnV0dG9uIHtcXG4gICAgICAgIHdpZHRoOiBhdXRvO1xcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMDtcXG4gICAgfVxcblxcbiAgICBkaXYuc3BlZWQtY29udHJvbHMge1xcbiAgICAgICAgd2lkdGg6IDUwJTtcXG4gICAgICAgIGZsb2F0OiBsZWZ0O1xcbiAgICB9XFxufVxcblxcbkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDYwNnB4KSB7XFxuICAgICNteUNhbnZhcyB7XFxuICAgICAgICB3aWR0aDogNjAwcHg7XFxuICAgIH1cXG5cXG4gICAgZGl2LmFjdGlvbi1jb250cm9scyB7XFxuICAgICAgICB3aWR0aDogMzAwcHg7XFxuICAgICAgICBmbG9hdDogbGVmdDtcXG4gICAgfVxcblxcbiAgICBkaXYuc3BlZWQtY29udHJvbHMge1xcbiAgICAgICAgd2lkdGg6IDMwMHB4O1xcbiAgICAgICAgZmxvYXQ6IGxlZnQ7XFxuICAgIH1cXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gKG1vZHVsZXMsIG1lZGlhUXVlcnksIGRlZHVwZSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfaV0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IHZhciBfaSA9IGFyciAmJiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBhcnJbU3ltYm9sLml0ZXJhdG9yXSB8fCBhcnJbXCJAQGl0ZXJhdG9yXCJdKTsgaWYgKF9pID09IG51bGwpIHJldHVybjsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfcywgX2U7IHRyeSB7IGZvciAoX2kgPSBfaS5jYWxsKGFycik7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pIHtcbiAgdmFyIF9pdGVtID0gX3NsaWNlZFRvQXJyYXkoaXRlbSwgNCksXG4gICAgICBjb250ZW50ID0gX2l0ZW1bMV0sXG4gICAgICBjc3NNYXBwaW5nID0gX2l0ZW1bM107XG5cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgXCJcIikuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG52YXIgcnVudGltZSA9IChmdW5jdGlvbiAoZXhwb3J0cykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIGZ1bmN0aW9uIGRlZmluZShvYmosIGtleSwgdmFsdWUpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBvYmpba2V5XTtcbiAgfVxuICB0cnkge1xuICAgIC8vIElFIDggaGFzIGEgYnJva2VuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSB0aGF0IG9ubHkgd29ya3Mgb24gRE9NIG9iamVjdHMuXG4gICAgZGVmaW5lKHt9LCBcIlwiKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZGVmaW5lID0gZnVuY3Rpb24ob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gb2JqW2tleV0gPSB2YWx1ZTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgZXhwb3J0cy53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgSXRlcmF0b3JQcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR3AuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvbjtcbiAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBkZWZpbmUoXG4gICAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsXG4gICAgdG9TdHJpbmdUYWdTeW1ib2wsXG4gICAgXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICk7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgZGVmaW5lKHByb3RvdHlwZSwgbWV0aG9kLCBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIGV4cG9ydHMubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgZGVmaW5lKGdlbkZ1biwgdG9TdHJpbmdUYWdTeW1ib2wsIFwiR2VuZXJhdG9yRnVuY3Rpb25cIik7XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIGV4cG9ydHMuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvciwgUHJvbWlzZUltcGwpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgLy8gSWYgYSByZWplY3RlZCBQcm9taXNlIHdhcyB5aWVsZGVkLCB0aHJvdyB0aGUgcmVqZWN0aW9uIGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gc28gaXQgY2FuIGJlIGhhbmRsZWQgdGhlcmUuXG4gICAgICAgICAgcmV0dXJuIGludm9rZShcInRocm93XCIsIGVycm9yLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZUltcGwoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgZXhwb3J0cy5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgZXhwb3J0cy5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0LCBQcm9taXNlSW1wbCkge1xuICAgIGlmIChQcm9taXNlSW1wbCA9PT0gdm9pZCAwKSBQcm9taXNlSW1wbCA9IFByb21pc2U7XG5cbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCksXG4gICAgICBQcm9taXNlSW1wbFxuICAgICk7XG5cbiAgICByZXR1cm4gZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgLy8gTm90ZTogW1wicmV0dXJuXCJdIG11c3QgYmUgdXNlZCBmb3IgRVMzIHBhcnNpbmcgY29tcGF0aWJpbGl0eS5cbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yW1wicmV0dXJuXCJdKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgZGVmaW5lKEdwLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JcIik7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBHcFtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBHcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgZXhwb3J0cy5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIGV4cG9ydHMudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG5cbiAgLy8gUmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZVxuICAvLyBvciBub3QsIHJldHVybiB0aGUgcnVudGltZSBvYmplY3Qgc28gdGhhdCB3ZSBjYW4gZGVjbGFyZSB0aGUgdmFyaWFibGVcbiAgLy8gcmVnZW5lcmF0b3JSdW50aW1lIGluIHRoZSBvdXRlciBzY29wZSwgd2hpY2ggYWxsb3dzIHRoaXMgbW9kdWxlIHRvIGJlXG4gIC8vIGluamVjdGVkIGVhc2lseSBieSBgYmluL3JlZ2VuZXJhdG9yIC0taW5jbHVkZS1ydW50aW1lIHNjcmlwdC5qc2AuXG4gIHJldHVybiBleHBvcnRzO1xuXG59KFxuICAvLyBJZiB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGUsIHVzZSBtb2R1bGUuZXhwb3J0c1xuICAvLyBhcyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIG5hbWVzcGFjZS4gT3RoZXJ3aXNlIGNyZWF0ZSBhIG5ldyBlbXB0eVxuICAvLyBvYmplY3QuIEVpdGhlciB3YXksIHRoZSByZXN1bHRpbmcgb2JqZWN0IHdpbGwgYmUgdXNlZCB0byBpbml0aWFsaXplXG4gIC8vIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgdmFyaWFibGUgYXQgdGhlIHRvcCBvZiB0aGlzIGZpbGUuXG4gIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgPyBtb2R1bGUuZXhwb3J0cyA6IHt9XG4pKTtcblxudHJ5IHtcbiAgcmVnZW5lcmF0b3JSdW50aW1lID0gcnVudGltZTtcbn0gY2F0Y2ggKGFjY2lkZW50YWxTdHJpY3RNb2RlKSB7XG4gIC8vIFRoaXMgbW9kdWxlIHNob3VsZCBub3QgYmUgcnVubmluZyBpbiBzdHJpY3QgbW9kZSwgc28gdGhlIGFib3ZlXG4gIC8vIGFzc2lnbm1lbnQgc2hvdWxkIGFsd2F5cyB3b3JrIHVubGVzcyBzb21ldGhpbmcgaXMgbWlzY29uZmlndXJlZC4gSnVzdFxuICAvLyBpbiBjYXNlIHJ1bnRpbWUuanMgYWNjaWRlbnRhbGx5IHJ1bnMgaW4gc3RyaWN0IG1vZGUsIHdlIGNhbiBlc2NhcGVcbiAgLy8gc3RyaWN0IG1vZGUgdXNpbmcgYSBnbG9iYWwgRnVuY3Rpb24gY2FsbC4gVGhpcyBjb3VsZCBjb25jZWl2YWJseSBmYWlsXG4gIC8vIGlmIGEgQ29udGVudCBTZWN1cml0eSBQb2xpY3kgZm9yYmlkcyB1c2luZyBGdW5jdGlvbiwgYnV0IGluIHRoYXQgY2FzZVxuICAvLyB0aGUgcHJvcGVyIHNvbHV0aW9uIGlzIHRvIGZpeCB0aGUgYWNjaWRlbnRhbCBzdHJpY3QgbW9kZSBwcm9ibGVtLiBJZlxuICAvLyB5b3UndmUgbWlzY29uZmlndXJlZCB5b3VyIGJ1bmRsZXIgdG8gZm9yY2Ugc3RyaWN0IG1vZGUgYW5kIGFwcGxpZWQgYVxuICAvLyBDU1AgdG8gZm9yYmlkIEZ1bmN0aW9uLCBhbmQgeW91J3JlIG5vdCB3aWxsaW5nIHRvIGZpeCBlaXRoZXIgb2YgdGhvc2VcbiAgLy8gcHJvYmxlbXMsIHBsZWFzZSBkZXRhaWwgeW91ciB1bmlxdWUgcHJlZGljYW1lbnQgaW4gYSBHaXRIdWIgaXNzdWUuXG4gIEZ1bmN0aW9uKFwiclwiLCBcInJlZ2VuZXJhdG9yUnVudGltZSA9IHJcIikocnVudGltZSk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGlzT2xkSUUgPSBmdW5jdGlvbiBpc09sZElFKCkge1xuICB2YXIgbWVtbztcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKCkge1xuICAgIGlmICh0eXBlb2YgbWVtbyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG4gICAgICAvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG4gICAgICAvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG4gICAgICAvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcbiAgICAgIC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuICAgICAgbWVtbyA9IEJvb2xlYW4od2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2IpO1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vO1xuICB9O1xufSgpO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gZ2V0VGFyZ2V0KCkge1xuICB2YXIgbWVtbyA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUodGFyZ2V0KSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vW3RhcmdldF07XG4gIH07XG59KCk7XG5cbnZhciBzdHlsZXNJbkRvbSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRG9tLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRG9tW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM11cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlc0luRG9tLnB1c2goe1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiBhZGRTdHlsZShvYmosIG9wdGlvbnMpLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICB2YXIgYXR0cmlidXRlcyA9IG9wdGlvbnMuYXR0cmlidXRlcyB8fCB7fTtcblxuICBpZiAodHlwZW9mIGF0dHJpYnV0ZXMubm9uY2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSAndW5kZWZpbmVkJyA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICAgIGlmIChub25jZSkge1xuICAgICAgYXR0cmlidXRlcy5ub25jZSA9IG5vbmNlO1xuICAgIH1cbiAgfVxuXG4gIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZShrZXksIGF0dHJpYnV0ZXNba2V5XSk7XG4gIH0pO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvcHRpb25zLmluc2VydChzdHlsZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHRhcmdldCA9IGdldFRhcmdldChvcHRpb25zLmluc2VydCB8fCAnaGVhZCcpO1xuXG4gICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gICAgfVxuXG4gICAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgfVxuXG4gIHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxudmFyIHJlcGxhY2VUZXh0ID0gZnVuY3Rpb24gcmVwbGFjZVRleHQoKSB7XG4gIHZhciB0ZXh0U3RvcmUgPSBbXTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHJlcGxhY2UoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG4gICAgdGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuICAgIHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuICB9O1xufSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcbiAgdmFyIGNzcyA9IHJlbW92ZSA/ICcnIDogb2JqLm1lZGlhID8gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKS5jb25jYXQob2JqLmNzcywgXCJ9XCIpIDogb2JqLmNzczsgLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcbiAgICB2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cbiAgICBpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9XG5cbiAgICBpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgIHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnKHN0eWxlLCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IG9iai5jc3M7XG4gIHZhciBtZWRpYSA9IG9iai5tZWRpYTtcbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKG1lZGlhKSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZS5yZW1vdmVBdHRyaWJ1dGUoJ21lZGlhJyk7XG4gIH1cblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSAndW5kZWZpbmVkJykge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGUuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXIgc2luZ2xldG9uQ291bnRlciA9IDA7XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgc3R5bGU7XG4gIHZhciB1cGRhdGU7XG4gIHZhciByZW1vdmU7XG5cbiAgaWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG4gICAgc3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZSA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlKG9iaik7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZShuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsgLy8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG4gIC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcblxuICBpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG4gIH1cblxuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5ld0xpc3QpICE9PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRG9tW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRvbVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRvbS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGlzIHJlZmVyZW5jZWQgYnkgb3RoZXIgbW9kdWxlcyBzbyBpdCBjYW4ndCBiZSBpbmxpbmVkXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDY2Nik7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNzc1KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=