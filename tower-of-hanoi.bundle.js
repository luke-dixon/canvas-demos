!function(t){var n={};function e(o){if(n[o])return n[o].exports;var r=n[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,e),r.l=!0,r.exports}e.m=t,e.c=n,e.d=function(t,n,o){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:o})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(e.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var r in t)e.d(o,r,function(n){return t[n]}.bind(null,r));return o},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=8)}([function(t,n,e){"use strict";function o(t,n){return function(t){if(Array.isArray(t))return t}(t)||function(t,n){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var e=[],o=!0,r=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(o=(a=s.next()).done)&&(e.push(a.value),!n||e.length!==n);o=!0);}catch(t){r=!0,i=t}finally{try{o||null==s.return||s.return()}finally{if(r)throw i}}return e}(t,n)||function(t,n){if(!t)return;if("string"==typeof t)return r(t,n);var e=Object.prototype.toString.call(t).slice(8,-1);"Object"===e&&t.constructor&&(e=t.constructor.name);if("Map"===e||"Set"===e)return Array.from(t);if("Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return r(t,n)}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function r(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,o=new Array(n);e<n;e++)o[e]=t[e];return o}t.exports=function(t){var n=o(t,4),e=n[1],r=n[3];if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),s="/*# ".concat(a," */"),c=r.sources.map((function(t){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(t," */")}));return[e].concat(c).concat([s]).join("\n")}return[e].join("\n")}},function(t,n,e){"use strict";t.exports=function(t){var n=[];return n.toString=function(){return this.map((function(n){var e=t(n);return n[2]?"@media ".concat(n[2]," {").concat(e,"}"):e})).join("")},n.i=function(t,e,o){"string"==typeof t&&(t=[[null,t,""]]);var r={};if(o)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(r[a]=!0)}for(var s=0;s<t.length;s++){var c=[].concat(t[s]);o&&r[c[0]]||(e&&(c[2]?c[2]="".concat(e," and ").concat(c[2]):c[2]=e),n.push(c))}},n}},function(t,n,e){"use strict";e.r(n);var o=e(0),r=e.n(o),i=e(1),a=e.n(i)()(r.a);a.push([t.i,":root {\n    --background-color: white;\n    --main-color: rgb(63, 111, 139);\n    --text-color: black;\n    --disabled-color: rgb(206,206,206);\n    --hover-color: rgb(125, 177, 247);\n    --visited-color: rgb(107, 82, 139);\n    --hover-visited-color: rgb(168, 129, 218);\n}\n\n/* Use box sizing (https://css-tricks.com/box-sizing/) */\nhtml {\n    box-sizing: border-box;\n}\n*, *:before, *:after {\n    box-sizing: inherit;\n}\n\n\nbody {\n    margin: 3px;\n    background-color: white;\n    background-color: var(--background-color);\n    color: black;\n    color: var(--text-color);\n}\n\narticle {\n    font-family: sans-serif;\n    background-color: white;\n    background-color: var(--background-color);\n}\n\nheader {\n    color: rgb(63, 111, 139);\n    color: var(--main-color);\n}\n\nbutton {\n    border: 1px solid rgb(63, 111, 139);\n    border: 1px solid var(--main-color);\n    padding: 1em 3em;\n    background-color: white;\n    background-color: var(--background-color);\n    color: rgb(63, 111, 139);\n    color: var(--main-color);\n    font-weight: bold;\n}\n\nbutton:disabled {\n    border: 1px solid rgb(206,206,206);\n    border: 1px solid var(--disabled-color);\n    padding: 1em 3em;\n    background-color: white;\n    background-color: var(--background-color);\n    color: rgb(206,206,206);\n    color: var(--disabled-color);\n}\n\nbutton:disabled:hover {\n    border: 1px solid rgb(206,206,206);\n    border: 1px solid var(--disabled-color);\n    padding: 1em 3em;\n    background-color: white;\n    background-color: var(--background-color);\n    color: rgb(206,206,206);\n    color: var(--disabled-color);\n}\n\nbutton:active,\nbutton:focus,\nbutton:hover {\n    padding: 1em 3em;\n    background-color: rgb(63, 111, 139);\n    background-color: var(--main-color);\n    color: white;\n    color: var(--background-color);\n    border: 1px solid rgb(63, 111, 139);\n    border: 1px solid var(--main-color);\n}\n\na {\n    color: rgb(63, 111, 139);\n    color: var(--main-color);\n}\na:visited {\n    color: rgb(107, 82, 139);\n    color: var(--visited-color);\n}\na:hover {\n    color: rgb(125, 177, 247);\n    color: var(--hover-color);\n}\na:hover:visited {\n    color: rgb(168, 129, 218);\n    color: var(--hover-visited-color);\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,yBAAyB;IACzB,+BAA+B;IAC/B,mBAAmB;IACnB,kCAA0B;IAC1B,iCAAiC;IACjC,kCAAkC;IAClC,yCAAyC;AAC7C;;AAEA,wDAAwD;AACxD;IACI,sBAAsB;AAC1B;AACA;IACI,mBAAmB;AACvB;;;AAGA;IACI,WAAW;IACX,uBAAyC;IAAzC,yCAAyC;IACzC,YAAwB;IAAxB,wBAAwB;AAC5B;;AAEA;IACI,uBAAuB;IACvB,uBAAyC;IAAzC,yCAAyC;AAC7C;;AAEA;IACI,wBAAwB;IAAxB,wBAAwB;AAC5B;;AAEA;IACI,mCAAmC;IAAnC,mCAAmC;IACnC,gBAAgB;IAChB,uBAAyC;IAAzC,yCAAyC;IACzC,wBAAwB;IAAxB,wBAAwB;IACxB,iBAAiB;AACrB;;AAEA;IACI,kCAAuC;IAAvC,uCAAuC;IACvC,gBAAgB;IAChB,uBAAyC;IAAzC,yCAAyC;IACzC,uBAA4B;IAA5B,4BAA4B;AAChC;;AAEA;IACI,kCAAuC;IAAvC,uCAAuC;IACvC,gBAAgB;IAChB,uBAAyC;IAAzC,yCAAyC;IACzC,uBAA4B;IAA5B,4BAA4B;AAChC;;AAEA;;;IAGI,gBAAgB;IAChB,mCAAmC;IAAnC,mCAAmC;IACnC,YAA8B;IAA9B,8BAA8B;IAC9B,mCAAmC;IAAnC,mCAAmC;AACvC;;AAEA;IACI,wBAAwB;IAAxB,wBAAwB;AAC5B;AACA;IACI,wBAA2B;IAA3B,2BAA2B;AAC/B;AACA;IACI,yBAAyB;IAAzB,yBAAyB;AAC7B;AACA;IACI,yBAAiC;IAAjC,iCAAiC;AACrC",sourcesContent:[":root {\n    --background-color: white;\n    --main-color: rgb(63, 111, 139);\n    --text-color: black;\n    --disabled-color: gray(83);\n    --hover-color: rgb(125, 177, 247);\n    --visited-color: rgb(107, 82, 139);\n    --hover-visited-color: rgb(168, 129, 218);\n}\n\n/* Use box sizing (https://css-tricks.com/box-sizing/) */\nhtml {\n    box-sizing: border-box;\n}\n*, *:before, *:after {\n    box-sizing: inherit;\n}\n\n\nbody {\n    margin: 3px;\n    background-color: var(--background-color);\n    color: var(--text-color);\n}\n\narticle {\n    font-family: sans-serif;\n    background-color: var(--background-color);\n}\n\nheader {\n    color: var(--main-color);\n}\n\nbutton {\n    border: 1px solid var(--main-color);\n    padding: 1em 3em;\n    background-color: var(--background-color);\n    color: var(--main-color);\n    font-weight: bold;\n}\n\nbutton:disabled {\n    border: 1px solid var(--disabled-color);\n    padding: 1em 3em;\n    background-color: var(--background-color);\n    color: var(--disabled-color);\n}\n\nbutton:disabled:hover {\n    border: 1px solid var(--disabled-color);\n    padding: 1em 3em;\n    background-color: var(--background-color);\n    color: var(--disabled-color);\n}\n\nbutton:active,\nbutton:focus,\nbutton:hover {\n    padding: 1em 3em;\n    background-color: var(--main-color);\n    color: var(--background-color);\n    border: 1px solid var(--main-color);\n}\n\na {\n    color: var(--main-color);\n}\na:visited {\n    color: var(--visited-color);\n}\na:hover {\n    color: var(--hover-color);\n}\na:hover:visited {\n    color: var(--hover-visited-color);\n}\n"],sourceRoot:""}]),n.default=a},function(t,n,e){"use strict";var o,r=function(){return void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o},i=function(){var t={};return function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}t[n]=e}return t[n]}}(),a=[];function s(t){for(var n=-1,e=0;e<a.length;e++)if(a[e].identifier===t){n=e;break}return n}function c(t,n){for(var e={},o=[],r=0;r<t.length;r++){var i=t[r],c=n.base?i[0]+n.base:i[0],u=e[c]||0,l="".concat(c," ").concat(u);e[c]=u+1;var d=s(l),h={css:i[1],media:i[2],sourceMap:i[3]};-1!==d?(a[d].references++,a[d].updater(h)):a.push({identifier:l,updater:p(h,n),references:1}),o.push(l)}return o}function u(t){var n=document.createElement("style"),o=t.attributes||{};if(void 0===o.nonce){var r=e.nc;r&&(o.nonce=r)}if(Object.keys(o).forEach((function(t){n.setAttribute(t,o[t])})),"function"==typeof t.insert)t.insert(n);else{var a=i(t.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(n)}return n}var l,d=(l=[],function(t,n){return l[t]=n,l.filter(Boolean).join("\n")});function h(t,n,e,o){var r=e?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(t.styleSheet)t.styleSheet.cssText=d(n,r);else{var i=document.createTextNode(r),a=t.childNodes;a[n]&&t.removeChild(a[n]),a.length?t.insertBefore(i,a[n]):t.appendChild(i)}}function f(t,n,e){var o=e.css,r=e.media,i=e.sourceMap;if(r?t.setAttribute("media",r):t.removeAttribute("media"),i&&btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleSheet)t.styleSheet.cssText=o;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(o))}}var A=null,v=0;function p(t,n){var e,o,r;if(n.singleton){var i=v++;e=A||(A=u(n)),o=h.bind(null,e,i,!1),r=h.bind(null,e,i,!0)}else e=u(n),o=f.bind(null,e,n),r=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)};return o(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap)return;o(t=n)}else r()}}t.exports=function(t,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=r());var e=c(t=t||[],n);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var o=0;o<e.length;o++){var r=s(e[o]);a[r].references--}for(var i=c(t,n),u=0;u<e.length;u++){var l=s(e[u]);0===a[l].references&&(a[l].updater(),a.splice(l,1))}e=i}}}},function(t,n,e){var o=function(t){"use strict";var n=Object.prototype,e=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},r=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",a=o.toStringTag||"@@toStringTag";function s(t,n,e){return Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}),t[n]}try{s({},"")}catch(t){s=function(t,n,e){return t[n]=e}}function c(t,n,e,o){var r=n&&n.prototype instanceof d?n:d,i=Object.create(r.prototype),a=new x(o||[]);return i._invoke=function(t,n,e){var o="suspendedStart";return function(r,i){if("executing"===o)throw new Error("Generator is already running");if("completed"===o){if("throw"===r)throw i;return I()}for(e.method=r,e.arg=i;;){var a=e.delegate;if(a){var s=b(a,e);if(s){if(s===l)continue;return s}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if("suspendedStart"===o)throw o="completed",e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);o="executing";var c=u(t,n,e);if("normal"===c.type){if(o=e.done?"completed":"suspendedYield",c.arg===l)continue;return{value:c.arg,done:e.done}}"throw"===c.type&&(o="completed",e.method="throw",e.arg=c.arg)}}}(t,e,a),i}function u(t,n,e){try{return{type:"normal",arg:t.call(n,e)}}catch(t){return{type:"throw",arg:t}}}t.wrap=c;var l={};function d(){}function h(){}function f(){}var A={};A[r]=function(){return this};var v=Object.getPrototypeOf,p=v&&v(v(k([])));p&&p!==n&&e.call(p,r)&&(A=p);var m=f.prototype=d.prototype=Object.create(A);function y(t){["next","throw","return"].forEach((function(n){s(t,n,(function(t){return this._invoke(n,t)}))}))}function g(t,n){var o;this._invoke=function(r,i){function a(){return new n((function(o,a){!function o(r,i,a,s){var c=u(t[r],t,i);if("throw"!==c.type){var l=c.arg,d=l.value;return d&&"object"==typeof d&&e.call(d,"__await")?n.resolve(d.__await).then((function(t){o("next",t,a,s)}),(function(t){o("throw",t,a,s)})):n.resolve(d).then((function(t){l.value=t,a(l)}),(function(t){return o("throw",t,a,s)}))}s(c.arg)}(r,i,o,a)}))}return o=o?o.then(a,a):a()}}function b(t,n){var e=t.iterator[n.method];if(void 0===e){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=void 0,b(t,n),"throw"===n.method))return l;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return l}var o=u(e,t.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,l;var r=o.arg;return r?r.done?(n[t.resultName]=r.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,l):r:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,l)}function C(t){var n={tryLoc:t[0]};1 in t&&(n.catchLoc=t[1]),2 in t&&(n.finallyLoc=t[2],n.afterLoc=t[3]),this.tryEntries.push(n)}function w(t){var n=t.completion||{};n.type="normal",delete n.arg,t.completion=n}function x(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(C,this),this.reset(!0)}function k(t){if(t){var n=t[r];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,i=function n(){for(;++o<t.length;)if(e.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=void 0,n.done=!0,n};return i.next=i}}return{next:I}}function I(){return{value:void 0,done:!0}}return h.prototype=m.constructor=f,f.constructor=h,h.displayName=s(f,a,"GeneratorFunction"),t.isGeneratorFunction=function(t){var n="function"==typeof t&&t.constructor;return!!n&&(n===h||"GeneratorFunction"===(n.displayName||n.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,f):(t.__proto__=f,s(t,a,"GeneratorFunction")),t.prototype=Object.create(m),t},t.awrap=function(t){return{__await:t}},y(g.prototype),g.prototype[i]=function(){return this},t.AsyncIterator=g,t.async=function(n,e,o,r,i){void 0===i&&(i=Promise);var a=new g(c(n,e,o,r),i);return t.isGeneratorFunction(e)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},y(m),s(m,a,"Generator"),m[r]=function(){return this},m.toString=function(){return"[object Generator]"},t.keys=function(t){var n=[];for(var e in t)n.push(e);return n.reverse(),function e(){for(;n.length;){var o=n.pop();if(o in t)return e.value=o,e.done=!1,e}return e.done=!0,e}},t.values=k,x.prototype={constructor:x,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!t)for(var n in this)"t"===n.charAt(0)&&e.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(e,o){return a.type="throw",a.arg=t,n.next=e,o&&(n.method="next",n.arg=void 0),!!o}for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r],a=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var s=e.call(i,"catchLoc"),c=e.call(i,"finallyLoc");if(s&&c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(s){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(t,n){for(var o=this.tryEntries.length-1;o>=0;--o){var r=this.tryEntries[o];if(r.tryLoc<=this.prev&&e.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var i=r;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,l):this.complete(a)},complete:function(t,n){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&n&&(this.next=n),l},finish:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.finallyLoc===t)return this.complete(e.completion,e.afterLoc),w(e),l}},catch:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.tryLoc===t){var o=e.completion;if("throw"===o.type){var r=o.arg;w(e)}return r}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,e){return this.delegate={iterator:k(t),resultName:n,nextLoc:e},"next"===this.method&&(this.arg=void 0),l}},t}(t.exports);try{regeneratorRuntime=o}catch(t){Function("r","regeneratorRuntime = r")(o)}},,,,function(t,n,e){e(4),t.exports=e(11)},function(t,n,e){var o=e(3),r=e(10);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[t.i,r,""]]);var i={insert:"head",singleton:!1};o(r,i);t.exports=r.locals||{}},function(t,n,e){"use strict";e.r(n);var o=e(0),r=e.n(o),i=e(1),a=e.n(i),s=e(2),c=a()(r.a);c.i(s.default),c.push([t.i,"#myCanvas {\n    border: 3px solid var(--main-color);\n    border: 3px solid var(--main-color);\n    width: 100%;\n    height: 300px;\n}\n\ndiv.action-controls {\n    width: 100%;\n}\ndiv.action-controls > button {\n    width: 100%;\n    margin-bottom: 10px;\n}\n\ndiv.speed-controls {\n}\n\n@media screen and (min-width: 228px) {\n    div.action-controls > button {\n        width: auto;\n    }\n}\n\n@media screen and (min-width: 475px) {\n    div.action-controls {\n        width: 50%;\n        float: left;\n    }\n    div.action-controls > button {\n        width: auto;\n        margin-bottom: 0;\n    }\n\n    div.speed-controls {\n        width: 50%;\n        float: left;\n    }\n}\n\n@media screen and (min-width: 606px) {\n    #myCanvas {\n        width: 600px;\n    }\n\n    div.action-controls {\n        width: 300px;\n        float: left;\n    }\n\n    div.speed-controls {\n        width: 300px;\n        float: left;\n    }\n}\n","",{version:3,sources:["webpack://./src/tower-of-hanoi/style.css"],names:[],mappings:"AAEA;IACI,mCAAmC;IAAnC,mCAAmC;IACnC,WAAW;IACX,aAAa;AACjB;;AAEA;IACI,WAAW;AACf;AACA;IACI,WAAW;IACX,mBAAmB;AACvB;;AAEA;AACA;;AAEA;IACI;QACI,WAAW;IACf;AACJ;;AAEA;IACI;QACI,UAAU;QACV,WAAW;IACf;IACA;QACI,WAAW;QACX,gBAAgB;IACpB;;IAEA;QACI,UAAU;QACV,WAAW;IACf;AACJ;;AAEA;IACI;QACI,YAAY;IAChB;;IAEA;QACI,YAAY;QACZ,WAAW;IACf;;IAEA;QACI,YAAY;QACZ,WAAW;IACf;AACJ",sourcesContent:['@import "../style.css";\n\n#myCanvas {\n    border: 3px solid var(--main-color);\n    width: 100%;\n    height: 300px;\n}\n\ndiv.action-controls {\n    width: 100%;\n}\ndiv.action-controls > button {\n    width: 100%;\n    margin-bottom: 10px;\n}\n\ndiv.speed-controls {\n}\n\n@media screen and (min-width: 228px) {\n    div.action-controls > button {\n        width: auto;\n    }\n}\n\n@media screen and (min-width: 475px) {\n    div.action-controls {\n        width: 50%;\n        float: left;\n    }\n    div.action-controls > button {\n        width: auto;\n        margin-bottom: 0;\n    }\n\n    div.speed-controls {\n        width: 50%;\n        float: left;\n    }\n}\n\n@media screen and (min-width: 606px) {\n    #myCanvas {\n        width: 600px;\n    }\n\n    div.action-controls {\n        width: 300px;\n        float: left;\n    }\n\n    div.speed-controls {\n        width: 300px;\n        float: left;\n    }\n}\n'],sourceRoot:""}]),n.default=c},function(t,n,e){"use strict";e.r(n);e(4);function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function r(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),n&&i(t,n)}function i(t,n){return(i=Object.setPrototypeOf||function(t,n){return t.__proto__=n,t})(t,n)}function a(t){var n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var e,o=c(t);if(n){var r=c(this).constructor;e=Reflect.construct(o,arguments,r)}else e=o.apply(this,arguments);return s(this,e)}}function s(t,n){return!n||"object"!==o(n)&&"function"!=typeof n?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):n}function c(t){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function u(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}function l(t,n){for(var e=0;e<n.length;e++){var o=n[e];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function d(t,n,e){return n&&l(t.prototype,n),e&&l(t,e),t}var h=function(){function t(n,e){u(this,t),this.mover=n,this.speed=e,this.finished=!1}return d(t,[{key:"move",value:function(t){throw new Error("Override this method")}},{key:"next",value:function(){return this}}]),t}(),f=function(t){r(e,t);var n=a(e);function e(t,o){var r;return u(this,e),(r=n.call(this,t,o)).finished=!0,r}return e}(h),A=function(t){r(e,t);var n=a(e);function e(t,o){var r;return u(this,e),(r=n.call(this,t,o)).mover.toPeg.disks.length>0?r.yPosTarget=r.mover.toPeg.disks[r.mover.toPeg.disks.length-1].yPos-20:r.yPosTarget=230,r}return d(e,[{key:"move",value:function(t){this.mover.disk.yPos<this.yPosTarget&&(this.mover.disk.yPos+=this.speed*t,this.mover.disk.yPos>=this.yPosTarget&&(this.mover.disk.yPos=this.yPosTarget))}},{key:"next",value:function(){return this.mover.disk.yPos===this.yPosTarget?new f(this.mover,this.speed):this}}]),e}(h),v=function(t){r(e,t);var n=a(e);function e(){return u(this,e),n.apply(this,arguments)}return d(e,[{key:"move",value:function(t){this.mover.disk.xPos<this.mover.toPeg.xPos?(this.mover.disk.xPos+=this.speed*t,this.mover.disk.xPos>this.mover.toPeg.xPos&&(this.mover.disk.xPos=this.mover.toPeg.xPos)):this.mover.disk.xPos>this.mover.toPeg.xPos&&(this.mover.disk.xPos-=this.speed*t,this.mover.disk.xPos<this.mover.toPeg.xPos&&(this.mover.disk.xPos=this.mover.toPeg.xPos))}},{key:"next",value:function(){return this.mover.disk.xPos===this.mover.toPeg.xPos?new A(this.mover,this.speed):this}}]),e}(h),p=function(t){r(e,t);var n=a(e);function e(){return u(this,e),n.apply(this,arguments)}return d(e,[{key:"move",value:function(t){this.mover.disk.yPos-=this.speed*t}},{key:"next",value:function(){return this.mover.disk.yPos<=50?(this.mover.disk.yPos=50,new v(this.mover,this.speed)):this}}]),e}(h);function m(t,n){for(var e=0;e<n.length;e++){var o=n[e];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}var y=function(){function t(n,e,o,r){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.xPos=n,this.yPos=e,this.width=o,this.color=r}var n,e,o;return n=t,(e=[{key:"draw",value:function(t){t.beginPath(),t.lineCap="round",t.strokeStyle=this.color,t.lineWidth=15,t.moveTo(this.xPos-5*this.width,this.yPos),t.lineTo(this.xPos+5*this.width,this.yPos),t.stroke()}}])&&m(n.prototype,e),o&&m(n,o),t}();function g(t,n){for(var e=0;e<n.length;e++){var o=n[e];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}var b=function(){function t(n,e,o,r){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.name=n,this.xPos=e,this.yPos=o,this.disks=r,this.width=40,this.height=130}var n,e,o;return n=t,(e=[{key:"pushDisk",value:function(t){this.disks.length>0?t.yPos=this.disks[this.disks.length-1].yPos-20:t.yPos=230,this.disks.push(t),t.xPos=this.xPos}},{key:"draw",value:function(t){t.beginPath(),t.lineCap="square",t.strokeStyle="brown",t.lineWidth=5,t.moveTo(this.xPos,this.yPos),t.stroke(),t.moveTo(this.xPos,this.yPos),t.lineTo(this.xPos-this.width,this.yPos),t.stroke(),t.moveTo(this.xPos,this.yPos),t.lineTo(this.xPos+this.width,this.yPos),t.stroke(),t.moveTo(this.xPos,this.yPos),t.lineTo(this.xPos,this.yPos-this.height),t.stroke(),t.strokeStyle="black",t.lineWidth=1,t.textAlign="center",t.font="24px sans-serif",t.fillText(this.name,this.xPos,this.yPos+35),this.disks.forEach((function(n){n.draw(t)}))}}])&&g(n.prototype,e),o&&g(n,o),t}(),C=regeneratorRuntime.mark((function t(n,e,o,r){return regeneratorRuntime.wrap((function(i){for(;;)switch(i.prev=i.next){case 0:if(!(n>0)){i.next=5;break}return i.delegateYield(t(n-1,e,r,o),"t0",2);case 2:return i.next=4,{action:"move",source:e,target:o};case 4:return i.delegateYield(t(n-1,r,o,e),"t1",5);case 5:case"end":return i.stop()}}),t)}));e(9);function w(t,n){for(var e=0;e<n.length;e++){var o=n[e];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}window.onload=function(){var t=document.getElementById("currentAnimationText"),n=!1,e=!1,o=1,r=[],i=null,a=function(t,n){var e=document.getElementById("myCanvas"),o=e.getContext("2d");o.clearRect(0,0,e.width,e.height),r.forEach((function(t){o.save(),t.draw(o),o.restore()})),"function"==typeof n&&(o.save(),n(o),o.restore())},s=function(){function r(t,n){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,r),this.speedMultiplier=5,this.fromPeg=t,this.toPeg=n,this.lastFrame=null,this.animationState=new p(this,o*this.speedMultiplier),this.disk=null,this.finishedCallback=null}var i,s,c;return i=r,(s=[{key:"move",value:function(o){var r=this;this.finishedCallback=o,this.disk=this.fromPeg.disks.pop(),e||t.replaceChild(document.createTextNode("Moving "+this.disk.color+" disk from "+this.fromPeg.name+" to "+this.toPeg.name),t.lastChild),n=!0,e||window.requestAnimationFrame((function(t){return r.update(t)}))}},{key:"cancel",value:function(){n=!1,this.animationState=new f(this.mover,5*o),this.disk&&this.toPeg.pushDisk(this.disk)}},{key:"update",value:function(t){var e=this,o=0;this.lastFrame&&t&&(o=(t-this.lastFrame)/100),this.animationState.move(o),this.animationState=this.animationState.next(),this.animationState.finished?(this.toPeg.pushDisk(this.disk),n=!1,this.finishedCallback()):(a(0,(function(t){e.disk.draw(t)})),this.lastFrame=t,n&&window.requestAnimationFrame((function(t){return e.update(t)})))}},{key:"speed",get:function(){return this.animationState.speed},set:function(t){this.animationState.speed=t*this.speedMultiplier}}])&&w(i.prototype,s),c&&w(i,c),r}(),c=function(){r=[new b("A",100,250,[new y(100,230,5,"purple"),new y(100,210,4,"blue"),new y(100,190,3,"green"),new y(100,170,2,"orange"),new y(100,150,1,"red")]),new b("B",300,250,[]),new b("C",500,250,[])]};!function(){t.appendChild(document.createTextNode("Press the Go button to begin:")),c();var n=document.getElementById("animateButton");n.addEventListener("click",(function(){n.disabled=!0;var o=C(r[0].disks.length,r[0],r[2],r[1],[]);!function n(r,c){if(c.done)return window.requestAnimationFrame(a),t.replaceChild(document.createTextNode("All finished. Press reset to start over:"),t.lastChild),void(e&&(e=!1));if(c.value){var u=c.value.source,l=c.value.target;(i=new s(u,l)).move((function(){n(e,o.next())}))}}(0,o.next())})),document.getElementById("resetButton").addEventListener("click",(function(){e=!0,t.replaceChild(document.createTextNode("Resetting"),t.lastChild),i&&(i.cancel(),window.requestAnimationFrame((function(){n.disabled=!1,t.replaceChild(document.createTextNode("Press the Go button to begin:"),t.lastChild),c(),window.requestAnimationFrame(a),e=!1})))}));var u=document.getElementById("speedSlider");u.oninput=function(){o=parseInt(u.value,10),i&&(i.speed=o)},o=parseInt(u.value,10),i&&(i.speed=o),window.requestAnimationFrame(a)}()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,