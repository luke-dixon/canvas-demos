!function(t){var n={};function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)e.d(r,o,function(n){return t[n]}.bind(null,o));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=7)}([function(t,n,e){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var t={};return function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}t[n]=e}return t[n]}}(),a=[];function c(t){for(var n=-1,e=0;e<a.length;e++)if(a[e].identifier===t){n=e;break}return n}function s(t,n){for(var e={},r=[],o=0;o<t.length;o++){var i=t[o],s=n.base?i[0]+n.base:i[0],l=e[s]||0,u="".concat(s," ").concat(l);e[s]=l+1;var d=c(u),h={css:i[1],media:i[2],sourceMap:i[3]};-1!==d?(a[d].references++,a[d].updater(h)):a.push({identifier:u,updater:m(h,n),references:1}),r.push(u)}return r}function l(t){var n=document.createElement("style"),r=t.attributes||{};if(void 0===r.nonce){var o=e.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(t){n.setAttribute(t,r[t])})),"function"==typeof t.insert)t.insert(n);else{var a=i(t.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(n)}return n}var u,d=(u=[],function(t,n){return u[t]=n,u.filter(Boolean).join("\n")});function h(t,n,e,r){var o=e?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(t.styleSheet)t.styleSheet.cssText=d(n,o);else{var i=document.createTextNode(o),a=t.childNodes;a[n]&&t.removeChild(a[n]),a.length?t.insertBefore(i,a[n]):t.appendChild(i)}}function f(t,n,e){var r=e.css,o=e.media,i=e.sourceMap;if(o?t.setAttribute("media",o):t.removeAttribute("media"),i&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}var v=null,p=0;function m(t,n){var e,r,o;if(n.singleton){var i=p++;e=v||(v=l(n)),r=h.bind(null,e,i,!1),o=h.bind(null,e,i,!0)}else e=l(n),r=f.bind(null,e,n),o=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)};return r(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap)return;r(t=n)}else o()}}t.exports=function(t,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=o());var e=s(t=t||[],n);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var r=0;r<e.length;r++){var o=c(e[r]);a[o].references--}for(var i=s(t,n),l=0;l<e.length;l++){var u=c(e[l]);0===a[u].references&&(a[u].updater(),a.splice(u,1))}e=i}}}},function(t,n,e){"use strict";t.exports=function(t){var n=[];return n.toString=function(){return this.map((function(n){var e=function(t,n){var e=t[1]||"",r=t[3];if(!r)return e;if(n&&"function"==typeof btoa){var o=(a=r,c=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),"/*# ".concat(s," */")),i=r.sources.map((function(t){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(t," */")}));return[e].concat(i).concat([o]).join("\n")}var a,c,s;return[e].join("\n")}(n,t);return n[2]?"@media ".concat(n[2]," {").concat(e,"}"):e})).join("")},n.i=function(t,e,r){"string"==typeof t&&(t=[[null,t,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var c=0;c<t.length;c++){var s=[].concat(t[c]);r&&o[s[0]]||(e&&(s[2]?s[2]="".concat(e," and ").concat(s[2]):s[2]=e),n.push(s))}},n}},function(t,n,e){var r=function(t){"use strict";var n=Object.prototype,e=n.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},o=r.iterator||"@@iterator",i=r.asyncIterator||"@@asyncIterator",a=r.toStringTag||"@@toStringTag";function c(t,n,e,r){var o=n&&n.prototype instanceof u?n:u,i=Object.create(o.prototype),a=new k(r||[]);return i._invoke=function(t,n,e){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return E()}for(e.method=o,e.arg=i;;){var a=e.delegate;if(a){var c=b(a,e);if(c){if(c===l)continue;return c}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if("suspendedStart"===r)throw r="completed",e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);r="executing";var u=s(t,n,e);if("normal"===u.type){if(r=e.done?"completed":"suspendedYield",u.arg===l)continue;return{value:u.arg,done:e.done}}"throw"===u.type&&(r="completed",e.method="throw",e.arg=u.arg)}}}(t,e,a),i}function s(t,n,e){try{return{type:"normal",arg:t.call(n,e)}}catch(t){return{type:"throw",arg:t}}}t.wrap=c;var l={};function u(){}function d(){}function h(){}var f={};f[o]=function(){return this};var v=Object.getPrototypeOf,p=v&&v(v(P([])));p&&p!==n&&e.call(p,o)&&(f=p);var m=h.prototype=u.prototype=Object.create(f);function g(t){["next","throw","return"].forEach((function(n){t[n]=function(t){return this._invoke(n,t)}}))}function y(t,n){var r;this._invoke=function(o,i){function a(){return new n((function(r,a){!function r(o,i,a,c){var l=s(t[o],t,i);if("throw"!==l.type){var u=l.arg,d=u.value;return d&&"object"==typeof d&&e.call(d,"__await")?n.resolve(d.__await).then((function(t){r("next",t,a,c)}),(function(t){r("throw",t,a,c)})):n.resolve(d).then((function(t){u.value=t,a(u)}),(function(t){return r("throw",t,a,c)}))}c(l.arg)}(o,i,r,a)}))}return r=r?r.then(a,a):a()}}function b(t,n){var e=t.iterator[n.method];if(void 0===e){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=void 0,b(t,n),"throw"===n.method))return l;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return l}var r=s(e,t.iterator,n.arg);if("throw"===r.type)return n.method="throw",n.arg=r.arg,n.delegate=null,l;var o=r.arg;return o?o.done?(n[t.resultName]=o.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,l):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,l)}function w(t){var n={tryLoc:t[0]};1 in t&&(n.catchLoc=t[1]),2 in t&&(n.finallyLoc=t[2],n.afterLoc=t[3]),this.tryEntries.push(n)}function x(t){var n=t.completion||{};n.type="normal",delete n.arg,t.completion=n}function k(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(w,this),this.reset(!0)}function P(t){if(t){var n=t[o];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,i=function n(){for(;++r<t.length;)if(e.call(t,r))return n.value=t[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return i.next=i}}return{next:E}}function E(){return{value:void 0,done:!0}}return d.prototype=m.constructor=h,h.constructor=d,h[a]=d.displayName="GeneratorFunction",t.isGeneratorFunction=function(t){var n="function"==typeof t&&t.constructor;return!!n&&(n===d||"GeneratorFunction"===(n.displayName||n.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,h):(t.__proto__=h,a in t||(t[a]="GeneratorFunction")),t.prototype=Object.create(m),t},t.awrap=function(t){return{__await:t}},g(y.prototype),y.prototype[i]=function(){return this},t.AsyncIterator=y,t.async=function(n,e,r,o,i){void 0===i&&(i=Promise);var a=new y(c(n,e,r,o),i);return t.isGeneratorFunction(e)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},g(m),m[a]="Generator",m[o]=function(){return this},m.toString=function(){return"[object Generator]"},t.keys=function(t){var n=[];for(var e in t)n.push(e);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=P,k.prototype={constructor:k,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(x),!t)for(var n in this)"t"===n.charAt(0)&&e.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function r(e,r){return a.type="throw",a.arg=t,n.next=e,r&&(n.method="next",n.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var c=e.call(i,"catchLoc"),s=e.call(i,"finallyLoc");if(c&&s){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(t,n){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&e.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,l):this.complete(a)},complete:function(t,n){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&n&&(this.next=n),l},finish:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.finallyLoc===t)return this.complete(e.completion,e.afterLoc),x(e),l}},catch:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.tryLoc===t){var r=e.completion;if("throw"===r.type){var o=r.arg;x(e)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,e){return this.delegate={iterator:P(t),resultName:n,nextLoc:e},"next"===this.method&&(this.arg=void 0),l}},t}(t.exports);try{regeneratorRuntime=r}catch(t){Function("r","regeneratorRuntime = r")(r)}},,,,,function(t,n,e){e(2),t.exports=e(10)},function(t,n,e){var r=e(0),o=e(9);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[t.i,o,""]]);var i={insert:"head",singleton:!1};r(o,i);t.exports=o.locals||{}},function(t,n,e){(n=e(1)(!1)).push([t.i,":root {\n    --background-color: white;\n    --main-color: rgb(63, 111, 139);\n    --text-color: black;\n    --disabled-color: rgb(207,207,207);\n    --hover-color: rgb(125, 177, 247);\n    --visited-color: rgb(107, 82, 139);\n    --hover-visited-color: rgb(168, 129, 218);\n}\n\n/* Use box sizing (https://css-tricks.com/box-sizing/) */\n\nhtml {\n    box-sizing: border-box;\n}\n\n*, *:before, *:after {\n    box-sizing: inherit;\n}\n\nbody {\n    margin: 3px;\n    background-color: white;\n    background-color: var(--background-color);\n    color: black;\n    color: var(--text-color);\n}\n\narticle {\n    font-family: sans-serif;\n    background-color: white;\n    background-color: var(--background-color);\n}\n\nheader {\n    color: rgb(63, 111, 139);\n    color: var(--main-color);\n}\n\nbutton {\n    border: 1px solid rgb(63, 111, 139);\n    border: 1px solid var(--main-color);\n    padding: 1em 3em;\n    background-color: white;\n    background-color: var(--background-color);\n    color: rgb(63, 111, 139);\n    color: var(--main-color);\n    font-weight: bold;\n}\n\nbutton:disabled {\n    border: 1px solid rgb(207,207,207);\n    border: 1px solid var(--disabled-color);\n    padding: 1em 3em;\n    background-color: white;\n    background-color: var(--background-color);\n    color: rgb(207,207,207);\n    color: var(--disabled-color);\n}\n\nbutton:disabled:hover {\n    border: 1px solid rgb(207,207,207);\n    border: 1px solid var(--disabled-color);\n    padding: 1em 3em;\n    background-color: white;\n    background-color: var(--background-color);\n    color: rgb(207,207,207);\n    color: var(--disabled-color);\n}\n\nbutton:active,\nbutton:focus,\nbutton:hover {\n    padding: 1em 3em;\n    background-color: rgb(63, 111, 139);\n    background-color: var(--main-color);\n    color: white;\n    color: var(--background-color);\n    border: 1px solid rgb(63, 111, 139);\n    border: 1px solid var(--main-color);\n}\n\na {\n    color: rgb(63, 111, 139);\n    color: var(--main-color);\n}\n\na:visited {\n    color: rgb(107, 82, 139);\n    color: var(--visited-color);\n}\n\na:hover {\n    color: rgb(125, 177, 247);\n    color: var(--hover-color);\n}\n\na:hover:visited {\n    color: rgb(168, 129, 218);\n    color: var(--hover-visited-color);\n}\n\n#myCanvas {\n    border: 3px solid rgb(63, 111, 139);\n    border: 3px solid var(--main-color);\n    width: 100%;\n    height: 300px;\n}\n\ndiv.action-controls {\n    width: 100%;\n}\n\ndiv.action-controls > button {\n    width: 100%;\n    margin-bottom: 10px;\n}\n\ndiv.speed-controls {\n}\n\n@media screen and (min-width: 228px) {\n    div.action-controls > button {\n        width: auto;\n    }\n}\n\n@media screen and (min-width: 475px) {\n    div.action-controls {\n        width: 50%;\n        float: left;\n    }\n    div.action-controls > button {\n        width: auto;\n        margin-bottom: 0;\n    }\n\n    div.speed-controls {\n        width: 50%;\n        float: left;\n    }\n}\n\n@media screen and (min-width: 606px) {\n    #myCanvas {\n        width: 600px;\n    }\n\n    div.action-controls {\n        width: 300px;\n        float: left;\n    }\n\n    div.speed-controls {\n        width: 300px;\n        float: left;\n    }\n}\n",""]),t.exports=n},function(t,n,e){"use strict";e.r(n);e(2);function r(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var o=function(){function t(n,e,r,o){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.xPos=n,this.yPos=e,this.width=r,this.color=o}var n,e,o;return n=t,(e=[{key:"draw",value:function(t){t.beginPath(),t.lineCap="round",t.strokeStyle=this.color,t.lineWidth=15,t.moveTo(this.xPos-5*this.width,this.yPos),t.lineTo(this.xPos+5*this.width,this.yPos),t.stroke()}}])&&r(n.prototype,e),o&&r(n,o),t}(),i=regeneratorRuntime.mark((function t(n,e,r,o){return regeneratorRuntime.wrap((function(i){for(;;)switch(i.prev=i.next){case 0:if(!(n>0)){i.next=5;break}return i.delegateYield(t(n-1,e,o,r),"t0",2);case 2:return i.next=4,{action:"move",source:e,target:r};case 4:return i.delegateYield(t(n-1,o,r,e),"t1",5);case 5:case"end":return i.stop()}}),t)}));e(8);function a(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}window.onload=function(){var t=document.getElementById("currentAnimationText"),n=!1,e=!1,r=1,c=[],s=function(t,n){var e=document.getElementById("myCanvas"),r=e.getContext("2d");r.clearRect(0,0,e.width,e.height),c.forEach((function(t){r.save(),t.draw(r),r.restore()})),"function"==typeof n&&(r.save(),n(r),r.restore())},l=function(){function o(t,n,e,r){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,o),this.name=t,this.xPos=n,this.yPos=e,this.disks=r,this.width=40,this.height=130}var i,c,l;return i=o,(c=[{key:"moveTopDiskTo",value:function(o,i){var a=this.disks.pop();e||t.replaceChild(document.createTextNode("Moving "+a.color+" disk from "+this.name+" to "+o.name),t.lastChild);var c="move-up";n=!0;var l=null;e||window.requestAnimationFrame((function t(u){var d=0,h=5*r;if(l&&u&&(d=(u-l)/100),e)return o.pushDisk(a),n=!1,void i();if("move-up"===c)a.yPos-=h*d,a.yPos<=50&&(a.yPos=50,c="move-across");else if("move-across"===c)a.xPos<o.xPos&&(a.xPos+=h*d),a.xPos>o.xPos&&(a.xPos-=h*d),a.xPos>o.xPos-h*d&&a.xPos<o.xPos+h*d&&(a.xPos=o.xPos,c="move-down");else if("move-down"===c){var f=230;o.disks.length>0&&(f=o.disks[o.disks.length-1].yPos-20),a.yPos<f&&(a.yPos+=h*d),a.yPos>=f&&(a.yPos=f,c="finished")}else if("finished"===c)return o.pushDisk(a),n=!1,void i();s(0,(function(t){a.draw(t)})),l=u,n&&window.requestAnimationFrame(t)}))}},{key:"pushDisk",value:function(t){this.disks.length>0?t.yPos=this.disks[this.disks.length-1].yPos-20:t.yPos=230,this.disks.push(t),t.xPos=this.xPos}},{key:"draw",value:function(t){t.beginPath(),t.lineCap="square",t.strokeStyle="brown",t.lineWidth=5,t.moveTo(this.xPos,this.yPos),t.stroke(),t.moveTo(this.xPos,this.yPos),t.lineTo(this.xPos-this.width,this.yPos),t.stroke(),t.moveTo(this.xPos,this.yPos),t.lineTo(this.xPos+this.width,this.yPos),t.stroke(),t.moveTo(this.xPos,this.yPos),t.lineTo(this.xPos,this.yPos-this.height),t.stroke(),t.strokeStyle="black",t.lineWidth=1,t.textAlign="center",t.font="24px sans-serif",t.fillText(this.name,this.xPos,this.yPos+35),this.disks.forEach((function(n){n.draw(t)}))}}])&&a(i.prototype,c),l&&a(i,l),o}(),u=function(){c=[new l("A",100,250,[new o(100,230,5,"purple"),new o(100,210,4,"blue"),new o(100,190,3,"green"),new o(100,170,2,"orange"),new o(100,150,1,"red")]),new l("B",300,250,[]),new l("C",500,250,[])]};!function(){t.appendChild(document.createTextNode("Press the Go button to begin:")),u();var n=document.getElementById("animateButton");n.addEventListener("click",(function(){n.disabled=!0;var r=i(c[0].disks.length,c[0],c[2],c[1],[]);!function o(i,a){if(a.done)return window.requestAnimationFrame(s),n.disabled=!1,t.replaceChild(document.createTextNode("All finished. Press reset to start over:"),t.lastChild),void(e&&(e=!1));if(a.value){var c=a.value.source,l=a.value.target;c.moveTopDiskTo(l,(function(){o(e,r.next())}))}}(0,r.next())})),document.getElementById("resetButton").addEventListener("click",(function(){e=!0,t.replaceChild(document.createTextNode("Resetting"),t.lastChild),setTimeout((function(){n.disabled=!1,t.replaceChild(document.createTextNode("Press the Go button to begin:"),t.lastChild),u(),window.requestAnimationFrame(s),e=!1}),1e3)}));var o=document.getElementById("speedSlider");o.oninput=function(){r=parseInt(o.value,10)},r=parseInt(o.value,10),window.requestAnimationFrame(s)}()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,